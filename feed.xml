<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不歸路</title>
  <subtitle>簡煒航的個人部落格</subtitle>
  <id>https://tonytonyjan.net</id>
  <link href="https://tonytonyjan.net"/>
  <link href="https://tonytonyjan.net/feed.xml" rel="self"/>
  <updated>2021-10-16T04:58:00+00:00</updated>
  <author>
    <name>大兜</name>
  </author>
  <entry>
    <title>你不需要 dotenv</title>
    <link rel="alternate" href="https://tonytonyjan.net/2021/10/16/you-might-not-need-dotenv/"/>
    <id>https://tonytonyjan.net/2021/10/16/you-might-not-need-dotenv/</id>
    <published>2021-10-16T04:58:00+00:00</published>
    <updated>2022-06-02T10:29:37+00:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/you-do-not-need-dotenv.jpg" alt="You don't need dotenv"&gt;&lt;/p&gt;

&lt;p&gt;還記得筆者第一次看到 &lt;code&gt;dotenv&lt;/code&gt; 的時候覺得這是哪個幽默的工程師寫的笑話用以嘲笑外行人，後來發現不對，這東西是認真的，而且有很多人在用這套工具。百思不得其解，就像幾年前看到 &lt;a href="https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/"&gt;&lt;code&gt;left-pad&lt;/code&gt;&lt;/a&gt; 一樣，明明實作不過 11 行，人們卻寧願仰賴第三方套件，也不願自己寫，好奇我們在開源軟體蓬勃發展之下，是否漸漸忘記怎麼用電腦。&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/you-do-not-need-dotenv.jpg" alt="You don't need dotenv" /&gt;&lt;/p&gt;

&lt;p&gt;還記得筆者第一次看到 &lt;code&gt;dotenv&lt;/code&gt; 的時候覺得這是哪個幽默的工程師寫的笑話用以嘲笑外行人，後來發現不對，這東西是認真的，而且有很多人在用這套工具。百思不得其解，就像幾年前看到 &lt;a href="https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/"&gt;&lt;code&gt;left-pad&lt;/code&gt;&lt;/a&gt; 一樣，明明實作不過 11 行，人們卻寧願仰賴第三方套件，也不願自己寫，好奇我們在開源軟體蓬勃發展之下，是否漸漸忘記怎麼用電腦。&lt;/p&gt;



&lt;h2 id="情境"&gt;情境&lt;/h2&gt;

&lt;p&gt;假設我們有一個 &lt;code&gt;.env&lt;/code&gt; 檔案，裡面存放 &lt;code&gt;key=value&lt;/code&gt; 這樣的資訊，而目的是在執行某個程序時，能夠將檔案中的內容載入環境變數，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .env
FOO=1
BAR=2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="解法"&gt;解法&lt;/h2&gt;

&lt;p&gt;筆者用以下方法已經很多年了：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;env $(cat .env) ruby -e 'pp ENV'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是不少人卻覺得這樣做比較酷：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;require 'dotenv'
Dotenv.load
pp ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-js"&gt;require("dotenv").config();
console.log(process.env);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;廢到笑。&lt;/p&gt;

&lt;p&gt;即便不具備 UN*X 的基本學識，但只要懂一點程式語言，起碼還能用語言本身的功能做到一樣的事，例如：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# myenv.rb
ENV.merge!({ 'FOO' =&amp;gt; '1', 'BAR' =&amp;gt; '2' })
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;require 'myenv'
pp ENV
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-js"&gt;// myenv.js
process.env.FOO = "1";
process.env.BAR = "2";
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-js"&gt;require("myenv");
console.log(process.env);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其實這個做法在 &lt;code&gt;.bashrc&lt;/code&gt; 很常見，有人會習慣在裡面放 &lt;code&gt;export KEY=VALUE&lt;/code&gt;，習慣再好一點的人會把環境變數分成別的檔案，並用 &lt;code&gt;source .env.sh&lt;/code&gt; 的方式來載入它們：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;# env.sh
export FOO=1
export BAR=2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;source env.sh
echo $FOO $BAR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這其實跟上述 &lt;code&gt;env.rb&lt;/code&gt; 和 &lt;code&gt;env.js&lt;/code&gt; 是一樣的道理，都是載入外部的檔案以設定環境變數。此外大多情況我們會用 POSIX 兼容的 shell 來完成日常的工作，這時再做一個能 cross shell 的 &lt;code&gt;.env.sh&lt;/code&gt; 是沒有必要的（例如支援 fish）。我們也不會為了設定 &lt;code&gt;bash&lt;/code&gt; 或 &lt;code&gt;fish&lt;/code&gt; 的環境變數，特別去尋找支援該 shell 的 &lt;code&gt;dotenv&lt;/code&gt; 套件，那顯得十分多餘。&lt;/p&gt;

&lt;p&gt;但是這個方法好像從 shell 語言換到其他程式語言後，工程師的大腦就會跟著突然被格式化。認為自己設定環境變數的風險太高，如果不趕快找一個第三方的環境變數載入器，自己將無法完成這個任務；使用套件後除得到內心的平靜，還能在其他新手間宣示自己使用了成熟的套件，藉以獲得他人尊敬，一舉數得。&lt;/p&gt;

&lt;p&gt;黑人問號。&lt;/p&gt;

&lt;h2 id="進階解法"&gt;進階解法&lt;/h2&gt;

&lt;p&gt;再複習一次原本的做法：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;env $(cat .env) ruby -e 'pp ENV'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;雖然這已能應付大多狀況，但無法處理環境變數中的空格及註解，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FOO=hello world

＃ comment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我們能用 &lt;code&gt;tr&lt;/code&gt; 和 &lt;code&gt;xargs&lt;/code&gt; 處理空格（此處為 BSD xargs 而非 GNU xargs）：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;cat .env |
  tr '\n' '\000' |
  xargs -0 -J@ env @ ruby -e 'pp ENV'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;並用 &lt;code&gt;grep&lt;/code&gt; 處理註解：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;grep -v '^ *#' .env |
  tr '\n' '\000' |
  xargs -0 -J@ env @ ruby -e 'pp ENV'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接著把這段指令寫在 alias 或是 function：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;alias xenv="grep -v '^ *#' | tr '\n' '\000' | xargs -0 -J@ env @"
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;xenv() {
  grep -v '^ *#' | tr '\n' '\000' | xargs -0 -J@ env @ "$@"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之後便能更方便地使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;cat .env1 .env2 .env3 | xenv ruby -e 'pp ENV'
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="與-dotenv-之間的差異"&gt;與 &lt;code&gt;dotenv&lt;/code&gt; 之間的差異&lt;/h2&gt;

&lt;p&gt;相較下筆者的做法較單純，其中最關鍵的差異是處理 &lt;code&gt;value&lt;/code&gt; 的方式為所見即所得。既沒有保留字元（除了換行），也不像 &lt;code&gt;dotenv&lt;/code&gt; 有 inner/outer/single/double quotes 的概念，更不會有出乎預期的行為（例如 &lt;code&gt;dotenv&lt;/code&gt; 會偷刪空格，沒仔細看 README 也許不會知道，更別說 &lt;code&gt;dotenv&lt;/code&gt; 還有一堆 quoting 相關的規則）。&lt;/p&gt;

&lt;p&gt;因為所見即所得，意即不用擔心意外用到任何跳脫字元：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat .env
FOO= ~!@#$%^&amp;amp;*()_+"'\
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cat .env | xenv ruby -e 'puts ENV["FOO"]'
 ~!@#$%^&amp;amp;*()_+"'\
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前看來表現得還不錯，但難免還是會好奇目前的實作和 &lt;code&gt;dotenv&lt;/code&gt; 之間的差距，於是筆者把 &lt;code&gt;dotenv&lt;/code&gt; 官方的 &lt;a href="https://github.com/motdotla/dotenv/blob/27dfd3f/README.md#rules"&gt;README&lt;/a&gt; 拿出參考：&lt;/p&gt;

&lt;ol class="task-list"&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /&gt;&lt;code&gt;BASIC=basic&lt;/code&gt; becomes &lt;code&gt;{BASIC: 'basic'}&lt;/code&gt;&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /&gt;empty lines are skipped&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /&gt;lines beginning with &lt;code&gt;#&lt;/code&gt; are treated as comments&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /&gt;empty values become empty strings (&lt;code&gt;EMPTY=&lt;/code&gt; becomes &lt;code&gt;{EMPTY: ''}&lt;/code&gt;)&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /&gt;inner quotes are maintained (think JSON) (&lt;code&gt;JSON={"foo": "bar"}&lt;/code&gt; becomes &lt;code&gt;{JSON:"{\"foo\": \"bar\"}"&lt;/code&gt;)&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /&gt;whitespace is removed from both ends of unquoted values (&lt;code&gt;FOO= some value &lt;/code&gt; becomes &lt;code&gt;{FOO: 'some value'}&lt;/code&gt;)&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /&gt;single and double quoted values are escaped (&lt;code&gt;SINGLE_QUOTE='quoted'&lt;/code&gt; becomes &lt;code&gt;{SINGLE_QUOTE: "quoted"}&lt;/code&gt;)&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /&gt;single and double quoted values maintain whitespace from both ends (&lt;code&gt;FOO=" some value "&lt;/code&gt; becomes &lt;code&gt;{FOO: ' some value '}&lt;/code&gt;)&lt;/li&gt;
  &lt;li class="task-list-item"&gt;&lt;input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /&gt;double quoted values expand new lines&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大概一半以上的功能都達到了，其中 6 筆者不認為是好設計，而 7 和 8 則是多餘的規則。總結來說只要沒有 &lt;code&gt;LF&lt;/code&gt; 換行字元，所有 &lt;code&gt;dotenv&lt;/code&gt; 能做到的事情，筆者的方法都能做到。&lt;/p&gt;

&lt;h2 id="關於-lf-換行字元"&gt;關於 &lt;code&gt;LF&lt;/code&gt; 換行字元&lt;/h2&gt;

&lt;p&gt;筆者的方法在 &lt;code&gt;value&lt;/code&gt; 的部分無法有換行字元，唯一的權變措施是將 &lt;code&gt;value&lt;/code&gt; 進行 &lt;code&gt;JSON&lt;/code&gt; 或是 &lt;code&gt;Base64&lt;/code&gt; 編碼，並在軟體中解碼，但筆者不建議這樣做。&lt;/p&gt;

&lt;p&gt;不如說有這種需求下，筆者建議放棄 &lt;code&gt;.env&lt;/code&gt; 的格式，有兩個理由。&lt;/p&gt;

&lt;p&gt;第一個理由是因為設定檔的存在是在工程師不更動原始碼的情況下，能夠透過修改這份檔案以在短時間內調整軟體的設定，亦即這樣的檔案理想上必須要能易讀、易改，不會出現大量像是 &lt;code&gt;\n&lt;/code&gt; 等的跳脫字元。&lt;/p&gt;

&lt;p&gt;既然設定檔必須是人本設計，那硬生生在 &lt;code&gt;key=value&lt;/code&gt; 的格式上加上 &lt;code&gt;\n&lt;/code&gt; 的符號反而與設定檔的初衷背道而馳。取而代之使用 &lt;code&gt;YAML&lt;/code&gt; 或是 &lt;code&gt;TOML&lt;/code&gt; 會比起 &lt;code&gt;.env&lt;/code&gt; 更為適合，試比較以下 3 種格式的可讀性：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dotenv&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FOO="hello\nworld"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-yml"&gt;FOO: |
  hello
  world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;TOML&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-toml"&gt;lines = '''
hello
world
'''
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二個反對的理由是 &lt;code&gt;.env&lt;/code&gt; 的檔案格式並不存在標準，&lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html"&gt;POSIX 僅對環境變數定義了 &lt;code&gt;key=value&lt;/code&gt; 的格式&lt;/a&gt;，並沒有提到將環境變數寫檔案中應該怎麼呈現，且每個語言的實作皆有所差異，能在 Node.js 的 &lt;code&gt;dotenv&lt;/code&gt; 執行的 &lt;code&gt;.env&lt;/code&gt; 未必能在 Ruby 的 &lt;code&gt;dotenv&lt;/code&gt; 中執行。&lt;/p&gt;

&lt;p&gt;另一方面 &lt;a href="https://yaml.org/spec/"&gt;&lt;code&gt;YAML&lt;/code&gt;&lt;/a&gt; 或 &lt;a href="https://toml.io/en/v1.0.0"&gt;&lt;code&gt;TOML&lt;/code&gt;&lt;/a&gt; 都有詳細的規格書，很多程式語言都有支援這些格式，所以實作起來也相當容易，例如使用 Ruby 載入 &lt;code&gt;env.yml&lt;/code&gt; 中的環境變數：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;alias yenv="ruby -ryaml -e 'exec(YAML.load(STDIN.read), *ARGV)'"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;為避免混淆，這裡用 &lt;code&gt;node&lt;/code&gt;（而非 &lt;code&gt;ruby&lt;/code&gt;）把環境變數 &lt;code&gt;FOO&lt;/code&gt; 印出來：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat env.yml | yenv node -e 'console.log(process.env.FOO)'
hello
world
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="簡單就是讚simple-is-good"&gt;簡單就是讚（Simple is Good）&lt;/h2&gt;

&lt;p&gt;最後再複習一次：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;env $(cat .env) [COMMAND [ARGS ...]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先不防看看自己專案下的 &lt;code&gt;.env&lt;/code&gt; 有沒有註解、空格、空行？沒有的話 &lt;code&gt;env&lt;/code&gt; 和 &lt;code&gt;cat&lt;/code&gt; 就能解決你的問題，有的話再加上 &lt;code&gt;grep&lt;/code&gt;、&lt;code&gt;tr&lt;/code&gt; 和 &lt;code&gt;xargs&lt;/code&gt;。如果有更花式的需求，那也許 &lt;code&gt;sed&lt;/code&gt; 和 &lt;code&gt;awk&lt;/code&gt; 也可以幫上忙。不要懼怕這些工具，它們全都符合 &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy"&gt;Unix 哲學&lt;/a&gt;，只要你想，便能組合出各種可能性。&lt;/p&gt;

&lt;p&gt;至於想在設定檔中支援特殊字元或換行，是時候考慮用成熟的格式標準了，例如 YAML、JSON、TOML 等，透過自己熟悉的程式語言與成熟的格式標準變能輕易做到。&lt;/p&gt;

&lt;p&gt;你的 &lt;code&gt;.env&lt;/code&gt; 應該越簡單越好，沒有跳脫字元、沒有換行、就只有 &lt;code&gt;key=value&lt;/code&gt;；當你需要更進階的設定，考慮更多的 UN*X 工具；當你不熟悉 UN*X 工具，可以比照像是 &lt;code&gt;.bashrc&lt;/code&gt; 的設定習慣以自己熟悉的程式語言實現；當你發現你幾乎要發明自己的 &lt;code&gt;.env&lt;/code&gt; 格式了，不妨考慮用更成熟的標準配合自己熟悉的程式語言實作它。&lt;/p&gt;

&lt;p&gt;最後就會發現，你真的不需要 &lt;code&gt;dotenv&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id="參考"&gt;參考&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="https://man7.org/linux/man-pages/man1/xargs.1.html"&gt;https://man7.org/linux/man-pages/man1/xargs.1.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.freebsd.org/cgi/man.cgi?xargs"&gt;https://www.freebsd.org/cgi/man.cgi?xargs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/freebsd/freebsd-src/blob/0c1a5ea/usr.bin/env/env.c#L192-L200"&gt;https://github.com/freebsd/freebsd-src/blob/0c1a5ea/usr.bin/env/env.c#L192-L200&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/coreutils/coreutils/blob/3753c70/src/env.c#L839-L851"&gt;https://github.com/coreutils/coreutils/blob/3753c70/src/env.c#L839-L851&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  <entry>
    <title>使用 Ruby 實作 RFC 2047</title>
    <link rel="alternate" href="https://tonytonyjan.net/2020/10/06/ruby-rfc2047/"/>
    <id>https://tonytonyjan.net/2020/10/06/ruby-rfc2047/</id>
    <published>2020-10-06T04:58:00+00:00</published>
    <updated>2022-06-02T10:29:37+00:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;最近踩到一個 Rails Action Mailer/Mailbox 的編碼陷阱，跟大家分享。由於 Rails 的 Action Mailer 和 Action Mailbox 功能是基於 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 實作而成，意謂著 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 裡頭存在的 bug，都一樣會出現在 Rails...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;最近踩到一個 Rails Action Mailer/Mailbox 的編碼陷阱，跟大家分享。由於 Rails 的 Action Mailer 和 Action Mailbox 功能是基於 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 實作而成，意謂著 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 裡頭存在的 bug，都一樣會出現在 Rails 裡面。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mikel/mail/issues/1402"&gt;其中有個編碼問題&lt;/a&gt;困擾著非英語使用者：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-rb"&gt;Mail::Encodings.value_decode '=?utf-8?B?MjTmmYLplpPjgIHjg4vjg6Xjg7zjgrnjgajnlarntYTjgpLo?= =?utf-8?B?i7Hoqp7jgafkuJbnlYzjgavnmbrkv6HjgZfjgabjgYTjgb7?='
# =&amp;gt; "24時間、ニュースと番組を���語で世界に発信していま"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可見 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 對 &lt;a href="https://tools.ietf.org/html/rfc2047"&gt;RFC 2047&lt;/a&gt; 的解碼沒有處理好，這會直接影響到 Action Mailbox 在讀取信件欄位時的正確性，例如無法正確顯示信件標題和收件人名稱。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mikel/mail/issues/1406"&gt;另一個問題是 &lt;code&gt;MS950&lt;/code&gt; 編碼&lt;/a&gt;，台灣仍然有許多政府單位的信件採用 &lt;code&gt;MS950&lt;/code&gt; 編碼：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-rb"&gt;Mail::Encodings.value_decode '=?MS950?B?rue26aWrrEapssS1ue6nvaXms3G5SLNX?= =?MS950?B?wMvBfLFNsM/Ay8F8pEirSL1jpmGnfcXn?= =?MS950?B?w9KhXaa5q0il86ywqHSyzqbbsMq1b7Bl?= =?MS950?B?oUG90MJJv++kVaTos3O1sqFBpMWmXrRfKQ==?='
# =&amp;gt; "�������F�����������q�H�W���|�M�����|�H�H�c�a�}�����]���H�����t�������o�e�A���I���U���s���A���^�_)"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;實務上 &lt;code&gt;MS950&lt;/code&gt; 和 &lt;code&gt;CP950&lt;/code&gt; 被視為相同的編碼，雖然但筆者找不到相關證據，但現今許多執行環境如 jRuby、Python 等，已經把 &lt;code&gt;MS950&lt;/code&gt; 視為 &lt;code&gt;CP950&lt;/code&gt; 的別名。所以上述代碼只要將兩者名稱替換，就能正確解碼：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-rb"&gt;Mail::Encodings.value_decode '=?MS950?B?rue26aWrrEapssS1ue6nvaXms3G5SLNX?= =?MS950?B?wMvBfLFNsM/Ay8F8pEirSL1jpmGnfcXn?= =?MS950?B?w9KhXaa5q0il86ywqHSyzqbbsMq1b7Bl?= =?MS950?B?oUG90MJJv++kVaTos3O1sqFBpMWmXrRfKQ==?='.gsub('MS950', 'CP950')
# =&amp;gt; "桃園市政府警察局交通違規檢舉專區檢舉人信箱地址驗證（此信件為系統自動發送，請點選下方連結，勿回復)"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不過而這個問題比較像是 CRuby 要處理，而非 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 要解決的。雖然可以在 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 繞路做別名處理，但原作者似乎鮮少在維護這個 gem 了。此外要在 CRuby 提交修補也不知道要等到何時。&lt;/p&gt;

&lt;p&gt;好在 &lt;a href="https://tools.ietf.org/html/rfc2047"&gt;RFC 2047&lt;/a&gt; 實作難度不高，且 &lt;a href="https://github.com/mikel/mail"&gt;mikel/mail&lt;/a&gt; 的 &lt;a href="https://tools.ietf.org/html/rfc822"&gt;RFC 822&lt;/a&gt; 剖析器是沒問題的，所以需要的程式碼也不多。&lt;/p&gt;

&lt;p&gt;使用範例：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-rb"&gt; Rfc2047.decode_field inbound_mail['subject'].value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;實作如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-rb"&gt;# frozen_string_literal: true

# Copyright (c) 2020 Jian Weihang &amp;lt;tonytonyjan@gmail.com&amp;gt;

module Rfc2047
  TOKEN = /[\041\043-\047\052\053\055\060-\071\101-\132\134\136\137\141-\176]+/.freeze
  ENCODED_TEXT = /[\041-\076\100-\176]+/.freeze
  ENCODED_WORD = /=\?(?&amp;lt;charset&amp;gt;#{TOKEN})\?(?&amp;lt;encoding&amp;gt;[QBqb])\?(?&amp;lt;encoded_text&amp;gt;#{ENCODED_TEXT})\?=/.freeze
  ENCODED_WORD_SEQUENCE = /#{ENCODED_WORD}(?: #{ENCODED_WORD})*/.freeze

  class &amp;lt;&amp;lt; self
    def decode_field(input)
      return input unless input.match?(ENCODED_WORD)

      input.gsub(ENCODED_WORD_SEQUENCE) do |match|
        match.split(' ').map! { decode(_1) }.join.encode(Encoding::UTF_8)
      end
    end

    def encode(input)
      "=?#{input.encoding}?B?#{[input].pack('m0')}?="
    end

    def decode(input)
      match_data = ENCODED_WORD.match(input)
      raise ArgumentError if match_data.nil?

      charset, encoding, encoded_text = match_data.captures
      charset = 'CP950' if charset == 'MS950'
      decoded =
        case encoding
        when 'Q', 'q' then encoded_text.unpack1('M')
        when 'B', 'b' then encoded_text.unpack1('m')
        end
      decoded.force_encoding(charset)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-rb"&gt;require 'rfc2047'
require 'minitest/autorun'

class Rfc2047Test &amp;lt; Minitest::Test
  def test_decode
    assert_equal 'this is some text', Rfc2047.decode('=?iso-8859-1?q?this=20is=20some=20text?=')
    assert_equal '測試', Rfc2047.decode('=?UTF-8?B?5ris6Kmm?=')
  end

  def test_encode
    assert_equal '=?UTF-8?B?5ris6Kmm?=', Rfc2047.encode('測試')
  end

  def test_decode_field
    assert_equal('hello', Rfc2047.decode_field('hello'))
    assert_equal('"卡牌屋正版中文桌上遊戲專賣店" &amp;lt;boardgamehut@gmail.com&amp;gt;', Rfc2047.decode_field('"=?BIG5?B?pWS1UKvOpb+qqaSkpOWu4KRXuUPAuLFNveapsQ==?=" &amp;lt;boardgamehut@gmail.com&amp;gt;'))
    assert_equal(
      '中央氣象局氣象資料開放平台訊息通知',
      Rfc2047.decode_field(
        '=?UTF-8?Q?=E4=B8=AD=E5=A4=AE=E6=B0=A3=E8=B1=A1=E5=B1=80=E6=B0=A3?= =?UTF-8?Q?=E8=B1=A1=E8=B3=87=E6=96=99=E9=96=8B=E6=94=BE=E5=B9=B3=E5=8F=B0?= =?UTF-8?Q?=E8=A8=8A=E6=81=AF=E9=80=9A=E7=9F=A5?='
      )
    )
    assert_equal(
      '桃園市政府警察局交通違規檢舉專區檢舉人信箱地址驗證（此信件為系統自動發送，請點選下方連結，勿回復)',
      Rfc2047.decode_field('=?MS950?B?rue26aWrrEapssS1ue6nvaXms3G5SLNX?= =?MS950?B?wMvBfLFNsM/Ay8F8pEirSL1jpmGnfcXn?= =?MS950?B?w9KhXaa5q0il86ywqHSyzqbbsMq1b7Bl?= =?MS950?B?oUG90MJJv++kVaTos3O1sqFBpMWmXrRfKQ==?=')
    )
  end
end
&lt;/code&gt;&lt;/pre&gt;

</content>
  </entry>
  <entry>
    <title>2020 要幹嘛？做 TJDict 2.0！</title>
    <link rel="alternate" href="https://tonytonyjan.net/2020/07/01/released-tjdict-v2-0-in-2020/"/>
    <id>https://tonytonyjan.net/2020/07/01/released-tjdict-v2-0-in-2020/</id>
    <published>2020-06-30T17:43:00+00:00</published>
    <updated>2022-06-02T10:29:37+00:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img src="/images/tjdict.png" alt="TJDict"&gt;&lt;/p&gt;

&lt;p&gt;筆者今年因為肺炎疫情緣故失業，本來想說終於有時間可以做許多想做的事：看看書、學日文、作曲玩動物森友會等等，不料突然收到一封 TJDict 使用者的來信說 Yahoo 字典壞掉了。心想 TJDict 開發至今已經 8 年，其中後 4 年完全沒有經手這個專案，藉機看一下 &lt;a href="https://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp"&gt;TJDict 在 Google Web Store&lt;/a&gt; 上的使用人數，發現至今仍然每週有約 20,000 人的使用者，頓時涕泗縱橫。身為一個碼農，知道自己的軟體對這個世界有所貢獻實在倍感光榮。&lt;/p&gt;

&lt;p&gt;為了消耗因為失業產生的大量時間，TJDict 2.0 就誕生了。&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;&lt;img src="/images/tjdict.png" alt="TJDict" /&gt;&lt;/p&gt;

&lt;p&gt;筆者今年因為肺炎疫情緣故失業，本來想說終於有時間可以做許多想做的事：看看書、學日文、作曲玩動物森友會等等，不料突然收到一封 TJDict 使用者的來信說 Yahoo 字典壞掉了。心想 TJDict 開發至今已經 8 年，其中後 4 年完全沒有經手這個專案，藉機看一下 &lt;a href="https://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp"&gt;TJDict 在 Google Web Store&lt;/a&gt; 上的使用人數，發現至今仍然每週有約 20,000 人的使用者，頓時涕泗縱橫。身為一個碼農，知道自己的軟體對這個世界有所貢獻實在倍感光榮。&lt;/p&gt;

&lt;p&gt;為了消耗因為失業產生的大量時間，TJDict 2.0 就誕生了。&lt;/p&gt;



&lt;h2 id="tjdict-20-做了什麼改變"&gt;TJDict 2.0 做了什麼改變？&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/CCDerTD8AsE?controls=0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""&gt;&lt;/iframe&gt;

&lt;p&gt;TJDict 1.0 使用的是 2012 當時的技術，那時並沒有 npm 或 bower、瀏覽器沒有無頭模式、&lt;a href="https://browserext.github.io/browserext/"&gt;Browser Extensions&lt;/a&gt; 標準尚未成熟或被瀏覽器實作等，那時開發比現在辛苦很多。&lt;/p&gt;

&lt;p&gt;而 TJDict 2.0 使用了 2020 能找到的最新技術：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;將 Bootstrap 更新到最新版&lt;/li&gt;
  &lt;li&gt;使用 npm 管理套件，不用自己實作套件版本依存系統&lt;/li&gt;
  &lt;li&gt;使用 React 渲染介面，跟 JS 檔案裡醜陋的 HTML 說再見。&lt;/li&gt;
  &lt;li&gt;使用 Storybook 管理 React 元件&lt;/li&gt;
  &lt;li&gt;使用 webpack 打包程式碼&lt;/li&gt;
  &lt;li&gt;使用 Chrome headless 執行測試，終於可以不用在桌面環境開瀏覽器跑測試&lt;/li&gt;
  &lt;li&gt;使用 GitHub Actions 每天自動測試 parser 是否運作正常，不用等到網友提報才知字典壞掉&lt;/li&gt;
  &lt;li&gt;Browser Extensions 標準成熟，輕鬆實現跨瀏覽器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上看不懂？沒關係，簡單的說意思就是：&lt;/p&gt;

&lt;p&gt;&lt;strong style="font-size: 300%"&gt;2 &amp;gt; 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;沒錯，2 大於 1，也就是 2 是 1 的兩倍，意思就是 TJDict 2.0 比 1.0 更好、更快、更穩，你們用用看就知道。&lt;/p&gt;

&lt;h2 id="tjdict-10-去哪了"&gt;TJDict 1.0 去哪了？&lt;/h2&gt;

&lt;p&gt;雖然已經沒有維護，加上筆者擅長寫髒碼，閱讀的人可能會產生幻覺或思覺失調症，但一想到說不定哪天誰有這方面的需求也不一定，以防萬一，所以筆者把&lt;a href="https://github.com/tonytonyjan/TJDict"&gt;原始碼公開在這了&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;至於 2.0 的原始碼，未來可能也會公開，只是現在還不是時候。&lt;/p&gt;

&lt;h2 id="官網成立"&gt;官網成立&lt;/h2&gt;

&lt;p&gt;官網就在 &lt;a href="https://tjdict.com"&gt;tjdict.com&lt;/a&gt;，建議大家如果還沒安裝的話，趕快點進去下載並安裝，因為 TJDict 真的是一款很棒的軟體，沒用過的話是你們的筍絲。&lt;/p&gt;

&lt;h2 id="下一步"&gt;下一步&lt;/h2&gt;

&lt;p&gt;其實有蠻多東西都在願望清單裡面的，像歷史紀錄、透過歷史紀錄自動產生生字簿、單字卡等等，也有把 TJDict 做成桌面軟體而非瀏覽器外掛的打算。&lt;/p&gt;

&lt;p&gt;除此之外有擴編團隊的想法，像工程師、設計師等，但更重要的是找到一個可以包養筆者、讓筆者一邊快樂寫程式一邊快樂長大的乾爹，目前這個職位尚有空缺（&lt;del&gt;歡迎來應徵&lt;/del&gt;）。&lt;/p&gt;

&lt;h2 id="感性一下"&gt;感性一下&lt;/h2&gt;

&lt;p&gt;其實身為一個小碼農，不敢奢求能做到什麼改變世界的創舉，但筆者小小的夢想一直是能夠開發出對這個世界有幫助的軟體，所以真的很感謝每一位使用 TJDict 的人，今天 TJDict 有你們繼續使用，就是筆者最大的開發動力：）&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Rails ActiveStorage 一次下載所有檔案</title>
    <link rel="alternate" href="https://tonytonyjan.net/2020/01/12/how-to-download-all-attachments-with-rails-activestorage/"/>
    <id>https://tonytonyjan.net/2020/01/12/how-to-download-all-attachments-with-rails-activestorage/</id>
    <published>2020-01-12T06:44:00+00:00</published>
    <updated>2022-06-02T10:29:37+00:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;自從 Rails 5.2 引進了 ActiveStorage 之後，似乎一直沒有看到什麼好方法可以一次下載所有的檔案。在 Rails 6 之後，多了 &lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 用以取代 &lt;code&gt;ActiveStorage::Downloading&lt;/code&gt;，即便如此，&lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 仍然只能處理一個檔案。無論是 Google 還是 Stack Overflow，皆尚未能看到任何簡潔的做法。&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;自從 Rails 5.2 引進了 ActiveStorage 之後，似乎一直沒有看到什麼好方法可以一次下載所有的檔案。在 Rails 6 之後，多了 &lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 用以取代 &lt;code&gt;ActiveStorage::Downloading&lt;/code&gt;，即便如此，&lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 仍然只能處理一個檔案。無論是 Google 還是 Stack Overflow，皆尚未能看到任何簡潔的做法。&lt;/p&gt;



&lt;h1 id="tldr"&gt;TLDR&lt;/h1&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def download_all(attachments, files = [], &amp;amp;block)
  if attachments.empty?
    yield files
    return
  end

  attachments.first.open do |file|
    files &amp;lt;&amp;lt; file
    method(__method__)[attachments[1, attachments.length - 1], files, &amp;amp;block]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;download_all(record.attachments) do |files|
  pp files
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="activestorageblobopen-有什麼限制"&gt;&lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 有什麼限制？&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 在處理單一檔案時沒什麼問題，具體使用方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;blob.open(tmpdir: "/path/to/tmp") do |file|
 file.class # =&amp;gt; Tempfile
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;詳細資訊請參考&lt;a href="https://api.rubyonrails.org/v6.0.2.1/classes/ActiveStorage/Blob.html#method-i-open"&gt;官方 API 文件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;其實作大概就是將檔案下載為暫存檔，而之所以不直接回傳 file 實體，改為用 block 來存取，是為了在 block 結束時自動將暫存檔刪掉，正如官方 API 文件所描述：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The tempfile is automatically closed and unlinked after the given block is executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以使用者在調用該方法時可以不用擔心下載後的檔案是否最終會塞滿硬碟空間，內部的實作已有做妥善的處理。&lt;/p&gt;

&lt;p&gt;但若我們想手動刪除暫存檔，辦得到嗎？一個常見的用例是將所有的檔案打包後壓縮成一個檔案，直覺的解法是迭代所有的檔案，逐一調用 &lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt;，但由於 block 結束後會將檔案刪掉導致無法存取。讓我們看一下&lt;a href="https://github.com/rails/rails/blob/f33d52c95217212cbacc8d5e44b5a8e3cdc6f5b3/activestorage/lib/active_storage/downloader.rb#L11-L17"&gt;原始碼&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;    def open(key, checksum:, name: "ActiveStorage-", tmpdir: nil)
      open_tempfile(name, tmpdir) do |file|
        download key, file
        verify_integrity_of file, checksum: checksum
        yield file
      end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由於 &lt;code&gt;ActiveStorage::Blob#open&lt;/code&gt; 最終會調用 &lt;code&gt;ActiveStorage::Downloader#open&lt;/code&gt;，而 &lt;code&gt;ActiveStorage::Downloader#open&lt;/code&gt; 卻僅支援 block 的寫法，導致無法將檔案迭代後再進行批次存取，因只要每次 block 一結束，該暫存檔就會被刪除。&lt;/p&gt;

&lt;h1 id="解法-1---另外複製檔案"&gt;解法 1 - 另外複製檔案&lt;/h1&gt;

&lt;p&gt;這個方法得記得手動把產生的檔案刪掉：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;files = []
record.attachments.each do |attachment|
  attachment.open do |file|
    new_path = "/usr/src/app/#{attachment.filename}"
    FileUtils.cp file.path, new_path
    files &amp;lt;&amp;lt; new_path
  end
end
pp files
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="解法-2---迭代"&gt;解法 2 - 迭代&lt;/h1&gt;

&lt;p&gt;這是筆者較常用的做法，暫存檔一樣會自動刪掉，但是必須在 block 內處理檔案，原始碼如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def download_all(attachments, files = [], &amp;amp;block)
  if attachments.empty?
    yield files
    return
  end

  attachments.first.open do |file|
    files &amp;lt;&amp;lt; file
    method(__method__)[attachments[1, attachments.length - 1], files, &amp;amp;block]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;download_all(record.attachments) do |files|
  pp files
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>在 canvas 繪製 JPEG 圖片後保留 EXIF 資訊</title>
    <link rel="alternate" href="https://tonytonyjan.net/2019/09/23/keep-exif-after-drawing-jpeg-image-to-canvas/"/>
    <id>https://tonytonyjan.net/2019/09/23/keep-exif-after-drawing-jpeg-image-to-canvas/</id>
    <published>2019-09-23T08:44:00+00:00</published>
    <updated>2022-06-02T10:29:37+00:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">
&lt;p&gt;筆者近來開發 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;canvas&lt;/a&gt; 相關的應用，發現繪製後的圖片會遺失 EXIF 資訊，於是花了點時間研究 JPEG 檔案格式的規格，並在此將解法分享出來。&lt;/p&gt;

</summary>
    <content type="html">
&lt;p&gt;筆者近來開發 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;canvas&lt;/a&gt; 相關的應用，發現繪製後的圖片會遺失 EXIF 資訊，於是花了點時間研究 JPEG 檔案格式的規格，並在此將解法分享出來。&lt;/p&gt;



&lt;p&gt;這個問題應該不難搜尋到&lt;a href="https://stackoverflow.com/questions/18297120/html5-resize-image-and-keep-exif-in-resized-image"&gt;這篇 Stack Overflow 上的討論串&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;只不過 Martin Perry 的&lt;a href="http://www.perry.cz/files/ExifRestorer.js"&gt;在 2013 的做法&lt;/a&gt;有些老舊，筆者重新用 2019 已知的技術翻新了版本。僅使用 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob"&gt;Blob&lt;/a&gt; 和 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"&gt;ArrayBuffer&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id="問題描述"&gt;問題描述&lt;/h2&gt;

&lt;p&gt;在 canvas 上繪製 JPEG 圖片，處理後再將 canvas 輸出新的 JPEG 圖片，同時保留 EXIF 資訊。&lt;/p&gt;

&lt;h2 id="demo"&gt;Demo&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://codepen.io/tonytonyjan/project/editor/XEkOkv"&gt;Keep EXIF Data after Drawing JPEG Image in Canvas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://gist.github.com/tonytonyjan/ffb7cd0e82cb293b843ece7e79364233"&gt;copyExif.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="解釋"&gt;解釋&lt;/h2&gt;

&lt;p&gt;直覺上，第一時間想到的做法會是先讀取 EXIF 後再重新寫入。其中讀取 EXIF 方面首選 &lt;a href="https://github.com/exif-js/exif-js"&gt;exif-js&lt;/a&gt;，但寫入 EXIF 方面就不是這麼容易找到成熟的專案，若非年久失修，就是使用的人太少，可能有很多尚未發現的問題。&lt;/p&gt;

&lt;p&gt;然而需求若只是單純要保存原本的 EXIF，而非逐一寫入，其實不需要用到像 exif-js 這麼大的專案。因為 JPEG 檔案的裡面的元資料其實像貨櫃一樣，一個個整齊地存放在名為 marker 的資料結構裡，而其中一個 marker 專門存放 EXIF 資訊。只要將其複製下來，並在新的 JPEG 圖片裡貼上，那麼新的圖片就可以完整保留原始圖片的 EXIF。&lt;/p&gt;

&lt;h2 id="jpeg-marker-結構"&gt;JPEG Marker 結構&lt;/h2&gt;

&lt;p&gt;每一個 JPEG marker 結構如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Marker&lt;/th&gt;
      &lt;th&gt;大小&lt;/th&gt;
      &lt;th&gt;資料&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FFXX&lt;/td&gt;
      &lt;td&gt;SSSS&lt;/td&gt;
      &lt;td&gt;DDDD&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;marker 的標頭都以兩個位元表示，格式以 &lt;code&gt;FFXX&lt;/code&gt; 的形式出現，而接著 marker 後的 2 個位元 &lt;code&gt;SSSS&lt;/code&gt; 則表示後面的資料結構的大小，格式為大端序（big-endian），而該數字所表達的大小包含了 &lt;code&gt;SSSS&lt;/code&gt; 所佔用 2 個位元。&lt;/p&gt;

&lt;p&gt;舉例：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FF C1 00 0C DD DD ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FFC1&lt;/code&gt; 表示 marker 標頭，&lt;code&gt;000C&lt;/code&gt; 表示資料結構大小為 12，但 12 包含了 &lt;code&gt;000C&lt;/code&gt; 本身，所以後面的 &lt;code&gt;DD DD ...&lt;/code&gt; 只有 10 個位元。&lt;/p&gt;

&lt;h2 id="copyexifjs"&gt;copyExif.js&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/tonytonyjan/ffb7cd0e82cb293b843ece7e79364233"&gt;原始碼&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EXIF 資訊存放在 APP1 marker 裡面，標頭為 &lt;code&gt;FFE1&lt;/code&gt;，這個檔案的實際操作如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;讀取來源 blob，搜尋 &lt;code&gt;FFE1&lt;/code&gt; 標頭，將整段 APP1 marker 擷取出來。&lt;/li&gt;
  &lt;li&gt;取得 canvas 的 blob。&lt;/li&gt;
  &lt;li&gt;將取得到的 APP1 marker 嵌入 canvas blob 裡面的正確位置。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="參考資料"&gt;參考資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Exif"&gt;https://en.wikipedia.org/wiki/Exif&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format#File_format_structure"&gt;https://en.wikipedia.org/wiki/JPEG_File_Interchange_Format#File_format_structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://exiftool.org/TagNames/EXIF.html"&gt;https://exiftool.org/TagNames/EXIF.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://web.archive.org/web/20131018091152/http://exif.org/Exif2-2.PDF"&gt;https://web.archive.org/web/20131018091152/http://exif.org/Exif2-2.PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://web.archive.org/web/20210108174645/https://www.adobe.io/content/dam/udp/en/open/standards/tiff/TIFF6.pdf"&gt;https://web.archive.org/web/20210108174645/https://www.adobe.io/content/dam/udp/en/open/standards/tiff/TIFF6.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.fileformat.info/format/tiff/egff.htm"&gt;https://www.fileformat.info/format/tiff/egff.htm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.loc.gov/preservation/digital/formats/fdd/fdd000022.shtml#specs"&gt;https://www.loc.gov/preservation/digital/formats/fdd/fdd000022.shtml#specs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.media.mit.edu/pia/Research/deepview/exif.html"&gt;https://www.media.mit.edu/pia/Research/deepview/exif.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.media.mit.edu/pia/Research/deepview/exif.html"&gt;https://www.media.mit.edu/pia/Research/deepview/exif.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>男生女生慼 - 適合兩對情侶的桌遊</title>
    <link rel="alternate" href="https://tonytonyjan.net/2019/02/09/a-board-game-for-double-dating/"/>
    <id>https://tonytonyjan.net/2019/02/09/a-board-game-for-double-dating/</id>
    <published>2019-02-09T07:14:00+00:00</published>
    <updated>2022-06-02T10:29:37+00:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;「男生女生慼」是筆者在某次與朋友雙約會的時候為了打發時間所想出來遊戲。內容跟猜謎類似且準備容易，規則也相當簡單，適合兩到三對情侶出遊時的空檔遊玩。&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;「男生女生慼」是筆者在某次與朋友雙約會的時候為了打發時間所想出來遊戲。內容跟猜謎類似且準備容易，規則也相當簡單，適合兩到三對情侶出遊時的空檔遊玩。&lt;/p&gt;



&lt;h2 id="準備物品"&gt;準備物品&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;情侶 2 對&lt;/li&gt;
  &lt;li&gt;紙卡 40 張（推薦便條紙，如果沒有也可用 5 張 A4 大小的紙摺 3 次，也會有 40 張紙卡）&lt;/li&gt;
  &lt;li&gt;筆 1 支&lt;/li&gt;
  &lt;li&gt;帽子 1 頂（或隨意一個適合丟紙卡的容器）&lt;/li&gt;
  &lt;li&gt;啤酒（選備，但如果有當然會更好）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="前置作業"&gt;前置作業&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;分成 2 個隊伍，一對情侶為一個隊伍，其中一人同時為主持人。&lt;/li&gt;
  &lt;li&gt;將紙卡平分，每人 10 張。&lt;/li&gt;
  &lt;li&gt;每人拿出 2 張紙卡，其中一張寫下考男生的問題，另一張寫下考女生的問題，這 2 張不能讓任何人看到。這些問題必須盡量難倒對手，但也盡量不能難倒自己的夥伴。以下列舉幾個問題：
    &lt;ul&gt;
      &lt;li&gt;女生的生日是今年幾月幾日？&lt;/li&gt;
      &lt;li&gt;男生最喜歡吃的食物是？&lt;/li&gt;
      &lt;li&gt;女生最喜歡的國家？&lt;/li&gt;
      &lt;li&gt;男生的身高是幾公分？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;問題盡量發揮各種想像力添增趣味，甚至可以塗鴉讓人猜是什麼，或是寫下令人感到羞恥的問題。&lt;/li&gt;
  &lt;li&gt;每人將寫好的 2 張紙卡折好丟進帽子裡，最後搖一搖帽子。&lt;/li&gt;
  &lt;li&gt;這時帽子裡面會有 8 張問題紙卡，而每個人手中也分別有 8 張空白紙卡，遊戲可以準備開始。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="遊戲開始"&gt;遊戲開始&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;主持人從帽中抽出一張問題卡並朗誦，丟棄該卡片，不放回帽子。&lt;/li&gt;
  &lt;li&gt;所有人針對這個問題，將問題的答案寫在一張自己的紙卡上，不能讓任何人看到。&lt;/li&gt;
  &lt;li&gt;等所有人都寫好答案且確定不再修改，這時主持人宣布所有人公布自己的答案。&lt;/li&gt;
  &lt;li&gt;主持人檢視兩隊之間的答案，如果兩兩相同，該隊拿到 2 分，差一點或對一半拿到 1 分，完全不同則無分。&lt;/li&gt;
  &lt;li&gt;主持人重複 1 至 3 步驟，直到帽中的 8 張問題卡皆已抽完。&lt;/li&gt;
  &lt;li&gt;經過 8 個回合後遊戲結束，結算總分。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="後記"&gt;後記&lt;/h2&gt;

&lt;p&gt;「男生女生慼」其中的「慼」是小時候遊戲「黑白慼，男生女生配」裡面的「慼」，發音是 tshueh，注音唸起來像「ㄘㄟˋ」，有討厭的意思。&lt;/p&gt;

&lt;p&gt;原本這遊戲是沒有名字的，筆者也不知道怎麼取名，但在遊玩的過程中，當看到男生答不出女生的生日時的那副天怒人怨的窘境，不難理解為何筆者將這個遊戲取名「男生女生慼」（笑）。&lt;/p&gt;

&lt;p&gt;因為雙約會的次數不太多，筆者其實只有玩過一次，如果對於這遊戲有什麼反饋，歡迎留言。&lt;/p&gt;
</content>
  </entry>
</feed>
