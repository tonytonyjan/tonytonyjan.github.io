<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不歸路</title>
  <subtitle>簡煒航的個人部落格</subtitle>
  <id>http://tonytonyjan.net</id>
  <link href="http://tonytonyjan.net"/>
  <link href="http://tonytonyjan.net/feed.xml" rel="self"/>
  <updated>2016-03-01T00:53:00+08:00</updated>
  <author>
    <name>大兜</name>
  </author>
  <entry>
    <title>Ziltag Beta 啟動</title>
    <link rel="alternate" href="http://tonytonyjan.net/2016/03/01/ziltag-start/"/>
    <id>http://tonytonyjan.net/2016/03/01/ziltag-start/</id>
    <published>2016-03-01T00:53:00+08:00</published>
    <updated>2016-03-01T17:08:19+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;筆者很久以前曾希望有個服務可以在圖片上自由的加上各種資訊，那是在看漫畫的時候，心想如果可以在某些分鏡加上自己的評論並與網友們互動，效果應該不錯，不料今天出自自己的手，世事難料啊⋯⋯&lt;/p&gt;

&lt;h1 id="zillion-tags-ziltag"&gt;Zillion Tags, Ziltag&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://ziltag.com"&gt;Ziltag&lt;/a&gt; 的目的是希望在現有的圖片、影片等多媒體上面，創要一種新的社交互動方式：你可以在任何圖片的任何地方標籤上任何資訊，可以是一句話、一個人名、一段連結影片等，而每個標籤都可以是個討論串。&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;筆者很久以前曾希望有個服務可以在圖片上自由的加上各種資訊，那是在看漫畫的時候，心想如果可以在某些分鏡加上自己的評論並與網友們互動，效果應該不錯，不料今天出自自己的手，世事難料啊⋯⋯&lt;/p&gt;

&lt;h1 id="zillion-tags-ziltag"&gt;Zillion Tags, Ziltag&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://ziltag.com"&gt;Ziltag&lt;/a&gt; 的目的是希望在現有的圖片、影片等多媒體上面，創要一種新的社交互動方式：你可以在任何圖片的任何地方標籤上任何資訊，可以是一句話、一個人名、一段連結影片等，而每個標籤都可以是個討論串。&lt;/p&gt;



&lt;p&gt;如果你的設備有滑鼠指標（Beta 尚未支援手機），只要將它移動到下面這張圖片就可以理解這個服務在做什麼：&lt;/p&gt;

&lt;p&gt;&lt;img alt="tonytonyjan is playing the piano" src="/images/piano.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;有別於其他平台，Ziltag 是以提供腳本的方式給那些想要在網站上提供多元互動的站長們使用，這些站長們可能是部落客、攝影師、畫家、設計師、美食家、探險家等。除了創造與讀者的新互動之外，他們也能透過標籤傳達讀者可能感興趣的資訊，例如商品的價錢、植物的介紹、食材廣告、英語單字教學等等，使用方式依照使用者的創意可以十分多元。&lt;/p&gt;

&lt;h1 id="ziltag-"&gt;成為 Ziltag 夥伴&lt;/h1&gt;

&lt;p&gt;成為使用者很容易，當你在聆聽筆者的音樂拙作時，就已經是 Ziltag 使用者了，如果想進一步留下評語（手下留情），直接留言即可，並不需要離開筆者的網站。相對的，你若有自己的網站，且也希望提供你的讀者不同的體驗，則必須透過 &lt;a href="https://ziltag.com"&gt;Ziltag&lt;/a&gt; 網站註冊並索取腳本，不妨今天就來玩玩看吧 :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Rails on webpack</title>
    <link rel="alternate" href="http://tonytonyjan.net/2016/02/10/rails-on-webpack/"/>
    <id>http://tonytonyjan.net/2016/02/10/rails-on-webpack/</id>
    <published>2016-02-10T22:35:00+08:00</published>
    <updated>2016-02-12T09:22:58+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;記得筆者在去年於 RubyConf Taiwan 講的題目「&lt;a href="https://youtu.be/0mphTtsekkI?t=2m59s"&gt;還給前端工程師一片天空&lt;/a&gt;」中提到如何整合 Rails 與 Node.js 世界的工具，&lt;a href="/slides/2015-09-11-return-front-end-back-to-front-end-developers/slides.pdf"&gt;投影片在此&lt;/a&gt;。雖然 &lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; 正夯，但礙於筆者當時沒去研究，使用的工具仍是上一代的 gulp、bower，所幸議程也有相關的講題，如&lt;strong&gt;何澤清&lt;/strong&gt;前輩的「&lt;a href="https://www.youtube.com/watch?v=vbdVuEctCCQ"&gt;gem 'webpack-rails'&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;只是經過筆者幾番研究之後，覺得整合這兩樣東西似乎不需要像網路上找到的各種教學文或是 gem 搞的那樣複雜，所以想藉這篇文章分享自己的做法（但並不保留 sprockets）。在那之前，先分享一些小知識：&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;記得筆者在去年於 RubyConf Taiwan 講的題目「&lt;a href="https://youtu.be/0mphTtsekkI?t=2m59s"&gt;還給前端工程師一片天空&lt;/a&gt;」中提到如何整合 Rails 與 Node.js 世界的工具，&lt;a href="/slides/2015-09-11-return-front-end-back-to-front-end-developers/slides.pdf"&gt;投影片在此&lt;/a&gt;。雖然 &lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; 正夯，但礙於筆者當時沒去研究，使用的工具仍是上一代的 gulp、bower，所幸議程也有相關的講題，如&lt;strong&gt;何澤清&lt;/strong&gt;前輩的「&lt;a href="https://www.youtube.com/watch?v=vbdVuEctCCQ"&gt;gem 'webpack-rails'&lt;/a&gt;」。&lt;/p&gt;

&lt;p&gt;只是經過筆者幾番研究之後，覺得整合這兩樣東西似乎不需要像網路上找到的各種教學文或是 gem 搞的那樣複雜，所以想藉這篇文章分享自己的做法（但並不保留 sprockets）。在那之前，先分享一些小知識：&lt;/p&gt;



&lt;h1 id="assetpath-"&gt;asset_path 知多少？&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;#asset_path&lt;/code&gt; 是 Rails 中其中一個底層 API，許多 helper 如 &lt;code&gt;#image_tag&lt;/code&gt; 等都會調用，而若沒有特別查閱原始碼，大概不多人知道 &lt;code&gt;asset_path('/app.js')&lt;/code&gt; 和 &lt;code&gt;asset_path('app.js')&lt;/code&gt; 差了一個斜線會影響結果，至於差在哪就讓我們節錄部份原始碼：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def asset_path(source, options = {})
  # ...
  if source[0] != ?/
    source = compute_asset_path(source, options)
  end
  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sprockets 其實有偷偷去複寫 &lt;code&gt;#compute_asset_path&lt;/code&gt;，也就是說當傳入 &lt;code&gt;"/app.js"&lt;/code&gt;，assets pipeline 是不會運作的，但若傳入 &lt;code&gt;"app.js"&lt;/code&gt;，在 sprockets &lt;code&gt;#compute_asset_path&lt;/code&gt; 的加持下結果會長的像 &lt;code&gt;/assets/app-c5bd5cb45ee76432b26a5dfb28e01b59.js?body=1&lt;/code&gt;；反之若 &lt;code&gt;"app.js"&lt;/code&gt; 檔案不存在，或者根本就沒安裝 sprockets，那就退回原型得到 &lt;code&gt;"/app.js"&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以只要我們複寫的 &lt;code&gt;#compute_asset_path&lt;/code&gt; 能算出 webpack 產生在 &lt;code&gt;public/assets&lt;/code&gt; 中的正確路徑，其實不用更改任何 API，就可以輕鬆整合 webpack。而 &lt;code&gt;#javascript_include_tag&lt;/code&gt;、&lt;code&gt;#stylesheet_link_tag&lt;/code&gt;、&lt;code&gt;#image_tag&lt;/code&gt; 等 helper 都可以照常使用。&lt;/p&gt;

&lt;h1 id="webpack---json"&gt;webpack –json&lt;/h1&gt;

&lt;p&gt;sprockets 在編譯後會產生 &lt;code&gt;manifest.json&lt;/code&gt;，裡面有 asset 原始路徑與其計算後的路徑資訊（例如 &lt;code&gt;app.js&lt;/code&gt; 對應到 &lt;code&gt;/assets/app-c5bd5cb45ee76432b26a5dfb28e01b59.js&lt;/code&gt;，以 Hash 儲存），好處是 Rails 可以透過讀檔取得計算後的路徑結果，不須透過 sprockets，所以為了增加效能，這個檔案在 production 環境中是必要的，而在 development 環境中，由於 assets 的路徑是及時透過 sprockets 得出，所以並不需要這個檔案。&lt;/p&gt;

&lt;p&gt;此外 sprockets 在 controller 與 router 中也動了手腳，這也是為什麼專案中 &lt;code&gt;public/assets&lt;/code&gt; 明明沒東西，而在 development 環境下中送出像是 &lt;code&gt;/assets/ooxx.js&lt;/code&gt; 的請求卻仍可以正常運作的原因。&lt;/p&gt;

&lt;p&gt;只是 webpack 畢竟是 Node.js 世界的產物，無法篡改 Rails controller 與 router，好消息是 &lt;code&gt;webpack --json&lt;/code&gt; 會產生一個跟 &lt;code&gt;manifest.json&lt;/code&gt; 類似的檔案（官方稱之為 stats file）。所以只要在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中加入產生 stats 的 plugin，再用 &lt;code&gt;webpack --watch&lt;/code&gt; 來開發就已經綽綽有餘了，例如我們在專案的根目錄下產生 &lt;code&gt;stats.json&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-js"&gt;plugins = [
  function() {
    this.plugin('done', function(stats) {
      require('fs').writeFileSync(__dirname + '/stats.json', JSON.stringify(stats.toJson()))
    })
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="section"&gt;範例專案&lt;/h1&gt;

&lt;p&gt;筆者&lt;a href="https://github.com/tonytonyjan/rails_on_webpack"&gt;在 Github 實作了一個範例&lt;/a&gt;，重點只在兩個檔案： &lt;a href="https://github.com/tonytonyjan/rails_on_webpack/blob/master/app/helpers/webpack_helper.rb"&gt;app/helpers/webpack_helper.rb&lt;/a&gt; 與 &lt;a href="https://github.com/tonytonyjan/rails_on_webpack/blob/master/lib/webpack_stats.rb"&gt;lib/webpack_stats.rb&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack_stats.rb&lt;/code&gt; 負責載入 webpack 產生的 &lt;code&gt;stats.json&lt;/code&gt;，經過處理之後產生一個 assets hash，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;{
  'app.js' =&amp;gt; '/assets/app.js',
  'app.css' =&amp;gt; '/assets/app-c5bd5cb45ee76432b26a5dfb28e01b59.css' # 也支援 hash 尾綴
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（限制是 webpack 必須遵守檔名格式為 &lt;code&gt;filename-hash.extname&lt;/code&gt; 或是 &lt;code&gt;filename.extname&lt;/code&gt;。）&lt;/p&gt;

&lt;p&gt;而這個 assets hash 將被用在 &lt;code&gt;#compute_asset_path&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# app/helpers/webpack_helper.rb
require 'webpack_stats'
module WebpackHelper
  def compute_asset_path source, options = {}
    WebpackStats.assets[source] || super
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大功告成！老實說這樣就已經能完美運作了，不用安裝什麼 gem，實測用來寫 react 也不用安裝 &lt;a href="https://github.com/reactjs/react-rails"&gt;react-rails&lt;/a&gt;。而剩下的問題已經不關整合的事，像要加入 SASS、CoffeeScript 或是 Font Awesome 等，或是在 production 下要壓縮 JavaScript 並且分離 CSS 檔案等，這取決開發者對 webpack 的掌握。&lt;/p&gt;

&lt;p&gt;至於只在 production 中分離 CSS 檔案，裡面可以這樣寫：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;%= stylesheet_link_tag 'application', media: 'all' if Rails.env.production? %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至於為何要這樣做，可參考 extract-text-webpack-plugin 的 &lt;a href="https://github.com/webpack/extract-text-webpack-plugin/blob/master/README.md"&gt;README&lt;/a&gt; 提到的優缺點。&lt;/p&gt;

&lt;h1 id="gem"&gt;我就是要 gem&lt;/h1&gt;

&lt;p&gt;其實筆者也是有做啦⋯⋯如果真的覺得那兩個檔案很麻煩，可以安裝 &lt;a href="https://github.com/tonytonyjan/webpack_stats"&gt;webpack_stats&lt;/a&gt;，這除了可以用在 Rails，也可以當一般 webpack stats 的 loader 使用（用在 Rails 之外的地方）。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>來自 chef.io 的小禮物</title>
    <link rel="alternate" href="http://tonytonyjan.net/2016/01/30/a-gift-from-chef-io/"/>
    <id>http://tonytonyjan.net/2016/01/30/a-gift-from-chef-io/</id>
    <published>2016-01-30T14:56:00+08:00</published>
    <updated>2016-02-11T11:37:49+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;筆者在開原世界裡面也打滾一陣子，貢獻過大小專案如 Rails、Ruby 等，也收過一些獎勵如比特幣、質數幣，但這次的禮物還蠻特別的，讓人忍不住想要多發一篇網誌：&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/chef-2.jpg" /&gt;&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;筆者在開原世界裡面也打滾一陣子，貢獻過大小專案如 Rails、Ruby 等，也收過一些獎勵如比特幣、質數幣，但這次的禮物還蠻特別的，讓人忍不住想要多發一篇網誌：&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/chef-2.jpg" /&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="http://chef.io/"&gt;chef.io&lt;/a&gt; 這種方式還頗逗趣的，比起錢，筆者似乎還比較喜歡這種可愛方式（完全中招啊）。除了感謝狀之外，還有一些小貼紙，可惜筆者沒有在筆電上面加貼紙的習慣，只能收在抽屜裡了。&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/chef.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;唯一美中不足的地方就是國名寫了「Province of China」讓人不是很舒服，如果只寫「China」或「Republic of China」筆者是還勉強可以接受，畢竟現在中國正在內戰中嘛，只是搞不清兩個政府的領土就實在有點不應該（但無論是哪一個 China，當然還是寫 Taiwan 最好聽了）。&lt;/p&gt;

&lt;h1 id="chefconf-2016"&gt;ChefConf 2016&lt;/h1&gt;

&lt;p&gt;題外話，最近筆者收到一封寄給貢獻者的 &lt;a href="https://chefconf.chef.io"&gt;ChefConf 2016&lt;/a&gt; 邀請信，早鳥票可以省 400 鎂，然後如果是 chef 貢獻者的話還可以額外省 $295 鎂，害得筆者頗心動，但即便如此筆者仍無法負擔高額的機票與住宿的費用，如果有誰需要這筆優惠的話，還請與筆者聯絡，不要讓這筆錢浪費了，感激不盡 :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>對不起，我把馬英九放進 Ruby 2.3 了</title>
    <link rel="alternate" href="http://tonytonyjan.net/2016/01/07/there-are-politicians-in-ruby-2-3-0/"/>
    <id>http://tonytonyjan.net/2016/01/07/there-are-politicians-in-ruby-2-3-0/</id>
    <published>2016-01-07T23:27:00+08:00</published>
    <updated>2016-01-30T14:59:28+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/ma.png"&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這世界所有升級到 Ruby 2.3 的伺服器，皆可以得到英九的庇佑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;身為一個 Ruby 語言的教徒，這個聖誕節最令人興奮的莫過於 &lt;a href="https://www.ruby-lang.org/en/news/2015/12/25/ruby-2-3-0-released/"&gt;Ruby 2.3&lt;/a&gt; 的發表了，不過這次由於筆者的緣故，意外讓台灣的政治人物們走進了 Ruby 原始碼中，究竟是怎麼回事呢XD&lt;/p&gt;

&lt;p&gt;百聞不如一見，各位不妨...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/ma.png" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;這世界所有升級到 Ruby 2.3 的伺服器，皆可以得到英九的庇佑。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;身為一個 Ruby 語言的教徒，這個聖誕節最令人興奮的莫過於 &lt;a href="https://www.ruby-lang.org/en/news/2015/12/25/ruby-2-3-0-released/"&gt;Ruby 2.3&lt;/a&gt; 的發表了，不過這次由於筆者的緣故，意外讓台灣的政治人物們走進了 Ruby 原始碼中，究竟是怎麼回事呢XD&lt;/p&gt;

&lt;p&gt;百聞不如一見，各位不妨可以先自己找看看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -s https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.0.tar.gz | tar -xz
$ grep -hr -C 3 馬英九 ruby-2.3.0
def test_jarowinkler_distance_with_utf8_strings
  assert_distance 0.9818, '變形金剛4:絕跡重生', '變形金剛4: 絕跡重生'
  assert_distance 0.8222, '連勝文',             '連勝丼'
  assert_distance 0.8222, '馬英九',             '馬英丸'
  assert_distance 0.6667, '良い',               'いい'
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="did-you-mean"&gt;Did You Mean?&lt;/h1&gt;

&lt;p&gt;Ruby 2.3 新增了錯字校正功能，會在我們打錯字的時候提醒我們，例如將 &lt;code&gt;#byebug&lt;/code&gt; 誤寫成 &lt;code&gt;#buybug&lt;/code&gt;。在過去 Ruby 只會擲出 &lt;code&gt;NameError&lt;/code&gt; 異常，並夾帶一串文字訊息，現在則除了擲出異常外，也會猜測你原本想輸入的文字：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;require 'byebug'
buybug
# NameError: undefined local variable or method `buybug' for main:Object
# Did you mean?  byebug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡（煒航）言之這就是 Ruby 的 spell check 功能，是來自 &lt;a href="https://twitter.com/yuki24"&gt;@yuki24&lt;/a&gt; 製作的 Ruby gem &lt;a href="https://github.com/yuki24/did_you_mean"&gt;did_you_mean&lt;/a&gt;，當 &lt;code&gt;NameError&lt;/code&gt; 發生時，該 gem  會嘗試找出其他相似的字。&lt;/p&gt;

&lt;h1 id="jaro-winkler-"&gt;Jaro-Winkler 距離&lt;/h1&gt;

&lt;p&gt;對於兩個字串之間的相似度的比對有許多相關的演算法，諸如 &lt;a href="https://www.wikiwand.com/en/Hamming_distance"&gt;Hamming&lt;/a&gt;、&lt;a href="https://www.wikiwand.com/en/Levenshtein_distance"&gt;Levenshtein&lt;/a&gt;、&lt;a href="https://www.wikiwand.com/en/Jaro%E2%80%93Winkler_distance"&gt;Jaro-Winkler&lt;/a&gt; 等，而對於短字串的比較尤以 Jaro-Winkler 普遍被認為較為精準。該演算法當初在醫療機構內，為了確認病患姓名而被發明出來的，如今卻已經在諸多領域中得到廣泛的使用，這也是 did_you_mean 所使用的核心算法。&lt;a href="https://github.com/yuki24/did_you_mean/commit/15f8b049ce2a04957d0975027f2cbf8e93b0ad59"&gt;在 Gemfile 中&lt;/a&gt;能找到一段 &lt;a href="https://github.com/tonytonyjan/jaro_winkler"&gt;jaro_winkler&lt;/a&gt; 的引用，這即是筆者的貢獻。&lt;/p&gt;

&lt;p&gt;只是不料當 did_you_mean 被移植到 Ruby 時，連筆者寫下的支援 UTF-8 的測試也都&lt;a href="https://github.com/yuki24/did_you_mean/blob/b2e4b3c590a2fd1b08f37a9d976e4dfe97533c68/test/edit_distance/jaro_winkler_test.rb"&gt;一併被移植過去了&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id="section"&gt;大選近矣&lt;/h1&gt;

&lt;p&gt;話說最近正逢總統大選，也發生一些趣事，有些國民黨的支持者在國民黨候選人的廣告上貼上馬英九的貼紙，聽說&lt;a href="https://www.ptt.cc/bbs/Gossiping/M.1451986445.A.CF1.html"&gt;就被移送法辦了&lt;/a&gt;，後續如何筆者不是很清楚。但現在因為筆者的關係，讓世界上的許多人的伺服器硬碟的某處存著一個馬英九，希望筆者不會有什麼遭遇才是。萬一，哪天筆者再也沒有出現在臉書上，傳訊也沒回，請幫筆者轉達家母「我愛她」。另外不自殺聲明已經放在 Github 上了，萬一有不測，請幫筆者討回公道，萬分感謝！&lt;/p&gt;

&lt;p&gt;話說回來，就算歐巴馬會寫程式好了，但不見得名字會在原始碼裡面呢，台灣是不是很厲害呢www&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>2015 回顧</title>
    <link rel="alternate" href="http://tonytonyjan.net/2016/01/02/2015-review/"/>
    <id>http://tonytonyjan.net/2016/01/02/2015-review/</id>
    <published>2016-01-02T01:09:00+08:00</published>
    <updated>2016-01-08T01:41:56+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/2016-firework.jpg" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;原來是 101 煙火啊，我還以為是洗瓶刷呢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;工作&lt;/th&gt;
      &lt;th&gt;成就&lt;/th&gt;
      &lt;th&gt;日常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;二月&lt;/td&gt;
      &lt;td&gt;待業&lt;/td&gt;
      &lt;td&gt;&lt;a href="/2015/02/23/feedback-to-confoo-2015"&gt;赴加拿大 confoo.ca 演講&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;三月&lt;/td&gt;
      &lt;td&gt;進入索拉爾&lt;/td&gt;
      &lt;td&gt;上班一週就離職、&lt;a href="/rails-road"&gt;出了一本書&lt;/a&gt;（衝上博客來新書排行 No.2，天瓏 No.9）&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;四月&lt;/td&gt;
      &lt;td&gt;進入 Ziltag&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;五月&lt;/td&gt;
      &lt;td&gt;Alpha Camp 客串講師&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;六月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href="/2015/07/03/dream-of-traveling-abroad"&gt;第一次出國玩&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;七月&lt;/td&gt;
      &lt;td&gt;&lt;a href="/events/2015-07-ruby-on-rails-training"&gt;Rails 桃園班&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;課程在 1 週內 50 人額滿&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;八月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;免役、從台科退學&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;九月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href="https://youtu.be/0mphTtsekkI?t=3m13s"&gt;在 Ruby Conf Taiwan 演講&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;湊合了第三對情侶，可以自封為媒人了&lt;/td&gt;
      &lt;td&gt;養貓了，脫離六年的獨居生活&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十二月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href="https://www.facebook.com/tonytonyjan/posts/10153377306582620"&gt;我的程式碼出現在 Ruby 2.3.0&lt;/a&gt;、&lt;a href="https://www.facebook.com/tonytonyjan/posts/10153405300657620"&gt;收到了 chef.io 的感謝函&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;湯圓大會、跨年晚會&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外值得慶祝的是：&lt;a href="https://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp"&gt;TJDict&lt;/a&gt; 突破 22k 使用人次了 :)&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/2016-firework.jpg" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;原來是 101 煙火啊，我還以為是洗瓶刷呢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;工作&lt;/th&gt;
      &lt;th&gt;成就&lt;/th&gt;
      &lt;th&gt;日常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;二月&lt;/td&gt;
      &lt;td&gt;待業&lt;/td&gt;
      &lt;td&gt;&lt;a href="/2015/02/23/feedback-to-confoo-2015"&gt;赴加拿大 confoo.ca 演講&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;三月&lt;/td&gt;
      &lt;td&gt;進入索拉爾&lt;/td&gt;
      &lt;td&gt;上班一週就離職、&lt;a href="/rails-road"&gt;出了一本書&lt;/a&gt;（衝上博客來新書排行 No.2，天瓏 No.9）&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;四月&lt;/td&gt;
      &lt;td&gt;進入 Ziltag&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;五月&lt;/td&gt;
      &lt;td&gt;Alpha Camp 客串講師&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;六月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href="/2015/07/03/dream-of-traveling-abroad"&gt;第一次出國玩&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;七月&lt;/td&gt;
      &lt;td&gt;&lt;a href="/events/2015-07-ruby-on-rails-training"&gt;Rails 桃園班&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;課程在 1 週內 50 人額滿&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;八月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;免役、從台科退學&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;九月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href="https://youtu.be/0mphTtsekkI?t=3m13s"&gt;在 Ruby Conf Taiwan 演講&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;湊合了第三對情侶，可以自封為媒人了&lt;/td&gt;
      &lt;td&gt;養貓了，脫離六年的獨居生活&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十二月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href="https://www.facebook.com/tonytonyjan/posts/10153377306582620"&gt;我的程式碼出現在 Ruby 2.3.0&lt;/a&gt;、&lt;a href="https://www.facebook.com/tonytonyjan/posts/10153405300657620"&gt;收到了 chef.io 的感謝函&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;湯圓大會、跨年晚會&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外值得慶祝的是：&lt;a href="https://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp"&gt;TJDict&lt;/a&gt; 突破 22k 使用人次了 :)&lt;/p&gt;



&lt;p&gt;2015 也是充滿各種刺激的一年，不過最值得慶祝的還是成功免役了，除了省下一些納稅人的錢，也幫家裡一個大忙，畢竟當一年兵就是把一年的年薪賠下去。且年初的時候還有收到澳洲、矽谷的 offer，但筆者那時因尚未服役或免役，所以就婉拒了，頓時心中頗有「中華民國誤我一生」的感覺，所幸但這件事情不會再發生了。&lt;/p&gt;

&lt;p&gt;新年嘛，難免許新希望，不過筆者自從去年領悟了及時行樂的智慧以後，就沒有什麼夢想了，感覺許下目標也沒什麼意義，當下活得不錯、無憂無疾就謝天謝地了，真要說的話大概是希望三十歲以前移民吧，但這是目標，不希望，兩者有些差異，目標是將會發生的事情，希望是即便沒發生也無妨。筆者想移民到非華人主宰的國家，然後如果可以一輩子不說中文，就一輩子不說。&lt;/p&gt;

&lt;p&gt;2016 正要開始，也不知道會發生什麼事情，畢竟回首過往，自己的人生似乎老走在鋼索上，只是相較往昔的自己，今日的心態已經平靜許多且可以輕鬆看待生死與成敗了，即便是從鋼索到跳火圈我想也是沒什麼大不了的。&lt;/p&gt;

&lt;p&gt;就這樣吧，新年快樂 :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>PTT 每天自動登入小程式</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/12/08/login-ptt-everyday-automatically/"/>
    <id>http://tonytonyjan.net/2015/12/08/login-ptt-everyday-automatically/</id>
    <published>2015-12-08T23:45:00+08:00</published>
    <updated>2015-12-09T13:17:12+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/ptt.png"&gt;&lt;/p&gt;

&lt;p&gt;最近大選近了，八卦版似乎將發文門檻調高到了 1000 次，帶風向的黨工少了，頓時清新了許多（不過仍然影響不到筆者）。其實養 PTT 帳號不容易，因為同一天只算登入一次，我們得每天記得登入一次 PTT，否則就平白損失了24 小時，如果沒有 PTT 成癮症，其實很容易忘記。&lt;/p&gt;

&lt;p&gt;而身為工程師如筆...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/ptt.png" /&gt;&lt;/p&gt;

&lt;p&gt;最近大選近了，八卦版似乎將發文門檻調高到了 1000 次，帶風向的黨工少了，頓時清新了許多（不過仍然影響不到筆者）。其實養 PTT 帳號不容易，因為同一天只算登入一次，我們得每天記得登入一次 PTT，否則就平白損失了24 小時，如果沒有 PTT 成癮症，其實很容易忘記。&lt;/p&gt;

&lt;p&gt;而身為工程師如筆者，為了遵守 DRY 原則，就應該寫個小程式去自動化這份工作才是。當然自己徒手寫程式建立 socket 與 PTT 做溝通是最直覺的想法，只不過 TCP 牽線容易，後續的 IO 處理則頗麻煩，為了模擬真實的操作，必須根據 socket 送來的字串判斷現在是要我們寫入帳號密碼還是按下回車。&lt;/p&gt;

&lt;p&gt;所幸這個問題在 1994 年就已經有人做出了專門的工具 &lt;code&gt;expect&lt;/code&gt;，用來將互動式的 IO 介面自動化。例如 &lt;code&gt;apt-get install&lt;/code&gt; 有時會被詢問一些是否覆蓋檔案或是安裝額外套件的問題，進而卡住，如果不用 &lt;code&gt;-y&lt;/code&gt; 之類的旗標，也可以透過 &lt;code&gt;expect&lt;/code&gt; 來實現。&lt;/p&gt;

&lt;p&gt;寫腳本之前先確認 &lt;code&gt;expect&lt;/code&gt; 的路徑：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which expect
/usr/local/bin/expect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;expect&lt;/code&gt; 是基於 Tcl 的工具，意即 &lt;code&gt;expect&lt;/code&gt; 腳本就是 Tcl 腳本，以下是用 &lt;code&gt;expect&lt;/code&gt; 寫的 PTT 自動登入程式：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-tcl"&gt;#!/usr/local/bin/expect -f
set timeout 60
log_file -noappend $env(HOME)/log/ptt.log
spawn telnet ptt.cc
expect "new"
send "$env(PTT_ID)\r"
expect ":"
send "$env(PTT_PWD)\r"
expect {
  "您想刪除其他重複登入的連線嗎" {
    send "n\r"
    exp_continue
  }
  "請按任意鍵繼續" {
    send "\r"
    exp_continue
  }
  "批踢踢實業坊" {
    exit
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這裡要注意的是編碼問題，因為 PTT 是 BIG-5 編碼，直接在原始碼中放 UTF-8 的中文字串會導致誤判，筆者是先透過 &lt;code&gt;iconv -f UTF-8 -t BIG-5&lt;/code&gt; 處理原始碼。&lt;/p&gt;

&lt;p&gt;假設腳本命名為 ptt，使用方式為：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PTT_ID=PTT_帳號 PTT_PWD=PTT_密碼 ptt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至於每天都執行一次的任務，就交給 &lt;code&gt;crontab&lt;/code&gt; 即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=/path/to/ptt/bin
6 6 * * * LC_ALL=zh_TW.Big5 PTT_ID=帳號 PTT_PWD=密碼 ptt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大功告成！&lt;/p&gt;
</content>
  </entry>
</feed>
