<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不歸路</title>
  <subtitle>簡煒航的個人部落格</subtitle>
  <id>http://tonytonyjan.net</id>
  <link href="http://tonytonyjan.net"/>
  <link href="http://tonytonyjan.net/feed.xml" rel="self"/>
  <updated>2015-07-03T16:43:00+08:00</updated>
  <author>
    <name>大兜</name>
  </author>
  <entry>
    <title>平凡人出國夢</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/07/03/dream-of-traveling-abroad/"/>
    <id>http://tonytonyjan.net/2015/07/03/dream-of-traveling-abroad/</id>
    <published>2015-07-03T16:43:00+08:00</published>
    <updated>2015-07-03T16:55:15+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/okinawa.jpg"&gt;&lt;/p&gt;

&lt;p&gt;六月去了一趟沖繩，這是第一次不是因為工作或是演講而出國，保持多年的「從沒出國玩過」的紀錄就這麼被破除了，高興之餘卻有些小可惜，畢竟再不能以炫耀式的語氣聲稱自己出國從沒有花過錢了。&lt;/p&gt;

&lt;p&gt;遙想兒時出國對筆者而言曾是高不可攀的夢想呢，那時全家都沒有人出過國，畢竟這種娛樂對家裡來說是個不小的負擔。幸...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/okinawa.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;六月去了一趟沖繩，這是第一次不是因為工作或是演講而出國，保持多年的「從沒出國玩過」的紀錄就這麼被破除了，高興之餘卻有些小可惜，畢竟再不能以炫耀式的語氣聲稱自己出國從沒有花過錢了。&lt;/p&gt;

&lt;p&gt;遙想兒時出國對筆者而言曾是高不可攀的夢想呢，那時全家都沒有人出過國，畢竟這種娛樂對家裡來說是個不小的負擔。幸運的是筆者在高二時投入了台北一個基金會的培訓計劃，紀錄一年以來所做的社區關懷服務，且得到了前往新加坡與萊佛士書院（聽說是新加坡的建中）學生交流的機會。那是筆者的第一次，也是整個家裡第一次有個人可以飛出台灣島看看外面的世界，那時心裡真的覺得可以光宗耀祖了。&lt;/p&gt;

&lt;p&gt;後來上了大學，因有幸得以回去基金會幫忙，又一次以小領隊的身份，帶著相隔幾屆的學弟妹飛往新加坡做交流。在此之後就沒有什麼出去的機會，加上大四開始成了家裡的經濟支柱，實在不敢有什麼昂貴的娛樂。這四年一度很羨慕身旁同學寒暑假可以四處出國玩，同時無奈自己成績在競爭激烈的校園中無法申請交換學生。&lt;/p&gt;

&lt;p&gt;現在出社會也有幾年，收入漸趨穩定，但也許是舊習所遷，即便過去所認為的昂貴在現在看似平價，心裡頭仍有幾分疙瘩，畢竟過去省習慣了，這錢實在花不下去，就連國內的著名景點也沒去過幾個，有駕照卻也沒車，由此斷定筆者是休閒界的麻瓜不為過。&lt;/p&gt;

&lt;p&gt;倒是這幾年透過投搞國際議程，筆者出國的機會漸漸變多，由於旅費、住宿大多由大會支出，筆者不用負擔太多經費，也省下不少錢，這似乎是個不錯的出國方式。缺點是機票可能是由大會決定，所以無法安排太彈性的旅程，且大多時間其實要做演講的準備，並不會花太多時間在娛樂上，實在難以放開心去玩。&lt;/p&gt;

&lt;p&gt;直到因緣際會之下認識了一位人氣探險家，帶著麻瓜筆者去沖繩玩，才首次體驗到放開心情去玩的感覺，整趟旅程真的很開心。雖然途中筆者曾出現些&lt;del&gt;可能屬於工程師的&lt;/del&gt;脫線的舉動，現在回憶起來還是非常感謝這位體貼耐心的探險家，陪我共度美好的時光。&lt;/p&gt;

&lt;p&gt;同時此程也解除了許多第一次成就，包括潛水（這輩子沒潛過水，第一次就是日本）、參加 Okinawa.rb、觀賞海豚秀等。想必是永生難忘，特以此文紀念，至於出遊照片與遊記之類的內容，且看筆者心情了XD&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>台灣身份證字號驗證器</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/04/15/national-identification-card-validator-of-taiwan/"/>
    <id>http://tonytonyjan.net/2015/04/15/national-identification-card-validator-of-taiwan/</id>
    <published>2015-04-15T18:30:00+08:00</published>
    <updated>2015-04-15T20:21:22+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;今天在 Ruby Taiwan 的 &lt;a href="https://www.facebook.com/groups/142197385837507/permalink/888110727912832/"&gt;FB 社團上&lt;/a&gt;看到 adz 大大在問是否有身份證字號驗證的 gem 可以用。&lt;/p&gt;

&lt;p&gt;這東西記得在大一時用 C、Java 各寫過一次，程式碼已遺失，反正今天寫了一天程式也累了，只好寫別的程式來放鬆一下（啥？），不過這次會用 Ruby 來寫，同樣的程式碼我也放在 &lt;a href="https://gist.github.com/tonytonyjan/361282d5b6771660b88c"&gt;Gist&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;今天在 Ruby Taiwan 的 &lt;a href="https://www.facebook.com/groups/142197385837507/permalink/888110727912832/"&gt;FB 社團上&lt;/a&gt;看到 adz 大大在問是否有身份證字號驗證的 gem 可以用。&lt;/p&gt;

&lt;p&gt;這東西記得在大一時用 C、Java 各寫過一次，程式碼已遺失，反正今天寫了一天程式也累了，只好寫別的程式來放鬆一下（啥？），不過這次會用 Ruby 來寫，同樣的程式碼我也放在 &lt;a href="https://gist.github.com/tonytonyjan/361282d5b6771660b88c"&gt;Gist&lt;/a&gt; 上面：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;MAP = {
  'A' =&amp;gt; [1, 0], 'B' =&amp;gt; [1, 1], 'C' =&amp;gt; [1, 2], 'D' =&amp;gt; [1, 3], 'E' =&amp;gt; [1, 4], 'F' =&amp;gt; [1, 5], 'G' =&amp;gt; [1, 6], 'H' =&amp;gt; [1, 7], 'I' =&amp;gt; [3, 4],
  'J' =&amp;gt; [1, 8], 'K' =&amp;gt; [1, 9], 'L' =&amp;gt; [2, 0], 'M' =&amp;gt; [2, 1], 'N' =&amp;gt; [2, 2], 'O' =&amp;gt; [3, 5], 'P' =&amp;gt; [2, 3], 'Q' =&amp;gt; [2, 4], 'R' =&amp;gt; [2, 5],
  'S' =&amp;gt; [2, 6], 'T' =&amp;gt; [2, 7], 'U' =&amp;gt; [2, 8], 'V' =&amp;gt; [2, 9], 'W' =&amp;gt; [3, 2], 'X' =&amp;gt; [3, 0], 'Y' =&amp;gt; [3, 1], 'Z' =&amp;gt; [3, 3]
}
 
MULTIPLIER = [1, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]
 
def id_check id
  return false unless id =~ /\A[A-Z]\d{9}\z/
  chars = id.chars
  numbers = MAP[chars.shift] + chars.map!(&amp;amp;:to_i)
 
  sum, i = 0, 0
  while i &amp;lt; 11
    sum += numbers[i] * MULTIPLIER[i]
    i += 1
  end
  sum % 10 == 0
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;寫完後還不免想要比較一下別人的 code，不料也能意外的比網路上僅存的兩個 gem 快兩倍以上：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;require 'benchmark'
require 'id_check'
require 'taiwanese_id_builder'
require 'TaiwanUserID'
 
n = 100000
Benchmark.bmbm do |x|
  x.report('wayne5540  '){ n.times{ TaiwaneseIdBuilder.valid?('A123456789') } }
  dummy = Object.new.extend(TaiwanUserID)
  x.report('kaochenlong'){ n.times{ dummy.is_valid?('A123456789') } }
  x.report('tonytonyjan'){ n.times{ id_check('A123456789') } }
end
 
# wayne5540     1.080000   0.230000   1.310000 (  1.319509)
# kaochenlong   1.860000   0.010000   1.870000 (  1.879476)
# tonytonyjan   0.550000   0.000000   0.550000 (  0.557314)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="while-"&gt;while 無敵&lt;/h2&gt;

&lt;p&gt;筆者只知道 Ruby 中的迭代方法，無論用 &lt;code&gt;#each&lt;/code&gt; 還是 &lt;code&gt;#times&lt;/code&gt;，沒有一個比 &lt;code&gt;while&lt;/code&gt; 還要快的，所以果斷用了 &lt;code&gt;while&lt;/code&gt; 來解題，但這題其實要幾兩個陣列相乘再做加總，其實可以用 &lt;code&gt;#zip&lt;/code&gt; 甚至是 Ruby 內建的 &lt;code&gt;Matrix&lt;/code&gt; 來做。&lt;/p&gt;

&lt;p&gt;正想做 benchmark 時就搜尋到&lt;a href="http://stackoverflow.com/questions/7372489/whats-the-efficient-way-to-multiply-two-arrays-and-get-sum-of-multiplied-values"&gt;這篇文章&lt;/a&gt;，所以果然還是 &lt;code&gt;while&lt;/code&gt; 無敵啊XD。&lt;/p&gt;

&lt;p&gt;對高效能的 Ruby 有興趣的人可以參考 Juanito Fatas 的 &lt;a href="https://github.com/JuanitoFatas/fast-ruby"&gt;fast-ruby&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id="section"&gt;其他人怎麼寫&lt;/h2&gt;

&lt;p&gt;在&lt;a href="https://github.com/wayne5540/taiwanese_id_builder/blob/master/lib/taiwanese_id_builder.rb"&gt;這裡&lt;/a&gt;可以找到 wayne5540 的程式碼，其中最令人糾結的是有一個 &lt;code&gt;puts&lt;/code&gt; 沒有拿掉，所以在執行 &lt;code&gt;#valid?&lt;/code&gt; 時會把結果印到螢幕上。所以要是像筆者一樣寫了 benchmark，自然是噴的整個螢幕都是。&lt;/p&gt;

&lt;p&gt;有趣的是筆者意外在 rubygems.org 找到高見龍的 &lt;a href="https://rubygems.org/gems/TaiwanUserID"&gt;gem&lt;/a&gt;，從時間上看是 2013 年 2 月推上來的，且 GitHub 上面找不到，也許是用在教學時寫的。&lt;/p&gt;

&lt;p&gt;裡面只有一個 32 行的檔案，比起 wayne5540 的 gem 要輕巧許多，但也不難看出是效能是怎麼被影響的：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;require "TaiwanUserID/version"

module TaiwanUserID
  def is_valid?(id)
    cities = {
      :A =&amp;gt; '10', :B =&amp;gt; '11', :C =&amp;gt; '12', :D =&amp;gt; '13',
      :E =&amp;gt; '14', :F =&amp;gt; '15', :G =&amp;gt; '16', :H =&amp;gt; '17',
      :I =&amp;gt; '34', :J =&amp;gt; '18', :K =&amp;gt; '19', :L =&amp;gt; '20',
      :M =&amp;gt; '21', :N =&amp;gt; '22', :O =&amp;gt; '35', :P =&amp;gt; '23',
      :Q =&amp;gt; '24', :R =&amp;gt; '25', :S =&amp;gt; '26', :T =&amp;gt; '27',
      :U =&amp;gt; '28', :V =&amp;gt; '29', :W =&amp;gt; '32', :X =&amp;gt; '30',
      :Y =&amp;gt; '31', :Z =&amp;gt; '33',
    }

    id_array = id.upcase.split('')

    special = cities[id_array.first.to_sym][0].to_i * 1 + cities[id_array.first.to_sym][1].to_i * 9
    sum =
      special +
      id_array[1].to_i * 8 +
      id_array[2].to_i * 7 +
      id_array[3].to_i * 6 +
      id_array[4].to_i * 5 +
      id_array[5].to_i * 4 +
      id_array[6].to_i * 3 +
      id_array[7].to_i * 2 +
      id_array[8].to_i * 1 +
      id_array[9].to_i

    return sum % 10 == 0
  end
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>TJDict 兩週年紀念</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/04/03/tjdict-second-anniversary/"/>
    <id>http://tonytonyjan.net/2015/04/03/tjdict-second-anniversary/</id>
    <published>2015-04-03T23:35:00+08:00</published>
    <updated>2015-04-04T01:40:29+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/tjdict.png"&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp?hl=zh-TW"&gt;點我下載&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://tjdict.me"&gt;開發者日誌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其實算起來兩週年是去年八月，現在發這篇有些晚，筆者寫此文前已先懺悔一番。&lt;/p&gt;

&lt;h2 id="section"&gt;說來那話兒也不長⋯⋯&lt;/h2&gt;

&lt;p&gt;2012 八月，筆者還是個飽受英文論文所苦的死大學生，總是開一堆字典交叉查詢覺得很不方便，索性做了一個工具幫助自己，本來是自用，但在朋友慫恿下放上了 Google...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/tjdict.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/caafmojgjlbflohillejdmnghkpcjjpp?hl=zh-TW"&gt;點我下載&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://tjdict.me"&gt;開發者日誌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其實算起來兩週年是去年八月，現在發這篇有些晚，筆者寫此文前已先懺悔一番。&lt;/p&gt;

&lt;h2 id="section"&gt;說來那話兒也不長⋯⋯&lt;/h2&gt;

&lt;p&gt;2012 八月，筆者還是個飽受英文論文所苦的死大學生，總是開一堆字典交叉查詢覺得很不方便，索性做了一個工具幫助自己，本來是自用，但在朋友慫恿下放上了 Google 應用程式商店。同時在自己的&lt;a href="http://www.plurk.com/p/h2o8zi"&gt;噗浪&lt;/a&gt;和&lt;a href="/2012/08/17/tjdict-english-chinese-dictionary-for-chrome/"&gt;部落格&lt;/a&gt;發表了作品，不料一週內發現有幾十人在使用，心喜之下又在 &lt;a href="https://plus.google.com/+%E7%B0%A1%E7%85%92%E8%88%AATJ/posts/jY9trCpqas9"&gt;G+ 發表了心情&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img alt="" src="/images/tjdict_plus.png" /&gt;&lt;/p&gt;

&lt;h2 id="tjdict-"&gt;看看我，我體內的 TJDict 已經長這麼大了。&lt;/h2&gt;

&lt;p&gt;現在回頭看起來，那時自己覺得 39 人就開心成這樣實在可愛，因為現在 TJDict 現在已經成長到每個禮拜有 17,000 個不同的使用者在查單字。沒有粉絲專頁、沒有行銷策略之下竟然也能長這麼大，完全是出乎意料之外。&lt;/p&gt;

&lt;p&gt;遙想當初沒沒無聞到現在有人喜歡、100+ 多個使用者回饋、在熱鬧的提問區、甚至有時用戶之間會有所互動、推上一個新功能過幾天就有網友的聲音。老實說身為一個一人開發者，能做出一個作品並且服務這麼多人，足堪告慰。&lt;/p&gt;

&lt;p&gt;究竟這兩年發生了什麼事情呢？筆者整理了一份清單：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://books.google.com.tw/books?id=YpCYBAAAQBAJ&amp;amp;pg=PA142&amp;amp;dq=TJDict&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=98QeVZb6FsLvmAWNvoCgAg&amp;amp;ved=0CCoQ6AEwAQ#v=onepage&amp;amp;q=TJDict&amp;amp;f=false"&gt;在書上被提及&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="http://www.books.com.tw/products/0010648438"&gt;Google活用技巧大解密&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.techbang.com/posts/16612-dictionary-of-core-cloud"&gt;T 客邦&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.bnext.com.tw/article/view/id/31079"&gt;數位時代&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://free.com.tw/tjdict/"&gt;免費資源網路社群&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.computerdiy.com.tw/all-articles/download-search/2927-tjdict"&gt;ComputerDIY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="tjdict--1"&gt;TJDict 未來&lt;/h2&gt;

&lt;p&gt;筆者是用工作之餘的時間開發，有時一忙起來就會不小心放置 play 好幾個月，也不確定會開發到什麼時候，不過這軟體筆者幾乎每天使用，基於這個動機開發下去是很合理的，所以估計未來哪天筆者英文已經進步到不需要查字，也許就是終止開發的時候，雖然這可能性微乎其微（如果學新的人類語言跟學新的程式語言一樣容易就好了）。&lt;/p&gt;

&lt;p&gt;只是筆者畢竟與喝熱血就飽的創業家不太一樣，還是要吃飯喝水的，所以最近又在 TJDict 上面多放上了贊助功能，也許有慈善家願意樂捐一些銀兩幫助筆者繼續開發也說不定XD&lt;/p&gt;

&lt;p&gt;對於 TJDict 的未來大致如上述，看起來還是有許多未知數，不過起碼有一件事情是確定的：筆者會竭盡所能繼續維護下去 =)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ConFoo 2015 心得</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/02/23/feedback-to-confoo-2015/"/>
    <id>http://tonytonyjan.net/2015/02/23/feedback-to-confoo-2015/</id>
    <published>2015-02-23T02:34:00+08:00</published>
    <updated>2015-02-28T23:14:30+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">
&lt;p&gt;&lt;a href="http://confoo.ca"&gt;&lt;img alt="ConFoo.CA 2015" src="/images/confoo-2015.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;到頭來出國從不為了玩的黃金紀錄仍然保持住了，真傷腦筋啊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;去年，筆者在 Ruby 官方網站看到了加拿大 ConFoo 在徵 Ruby 的稿件，雖然蒙特婁有些遙遠，不過講者享有交通與食宿全免的福利（住在希爾頓酒店），筆者遂小投三篇，結果運氣不錯地&lt;a href="http://confoo.ca/en/speaker/weihang-jian"&gt;上了兩篇&lt;/a&gt;。按照上一篇 Ruby Kaigi 的慣例，先來秀個徽章吧 =)&lt;/p&gt;

</summary>
    <content type="html">
&lt;p&gt;&lt;a href="http://confoo.ca"&gt;&lt;img alt="ConFoo.CA 2015" src="/images/confoo-2015.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;到頭來出國從不為了玩的黃金紀錄仍然保持住了，真傷腦筋啊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;去年，筆者在 Ruby 官方網站看到了加拿大 ConFoo 在徵 Ruby 的稿件，雖然蒙特婁有些遙遠，不過講者享有交通與食宿全免的福利（住在希爾頓酒店），筆者遂小投三篇，結果運氣不錯地&lt;a href="http://confoo.ca/en/speaker/weihang-jian"&gt;上了兩篇&lt;/a&gt;。按照上一篇 Ruby Kaigi 的慣例，先來秀個徽章吧 =)&lt;/p&gt;



&lt;p&gt;&lt;a href="http://confoo.ca/en/speaker/weihang-jian"&gt;&lt;img alt="ConFoo 2015 Speaker" src="/images/confoo-speaker.gif" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這次的旅程對筆者來說有需多值得紀念意義，並且刷了許多「第一次」成就：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;路過北京、上海&lt;/li&gt;
  &lt;li&gt;轉機經驗&lt;/li&gt;
  &lt;li&gt;到西方國家&lt;/li&gt;
  &lt;li&gt;自己規劃出國&lt;/li&gt;
  &lt;li&gt;體驗零下 -15 度、下雪、堆雪人&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但要說收穫最多的，是筆者終於在死前克服了搭飛機的恐懼，非指懼高症，而是對於流程的不安與緊張感，就像小時候時第一次自己搭火車一樣，從月台買票到進入月台到上對火車，即便去年有去日本的經驗，筆者仍然對於流程非常陌生，而這次來回總共搭了六台飛機，不想熟悉也難。&lt;/p&gt;

&lt;p&gt;另外此趟只有損失零錢包與手機，比預料中的情況要好很多，希望下次出國可以挑戰無損歸國。只是不知道三月當了上班族後，是否還有時間可以參與議程，有點可惜。&lt;/p&gt;

&lt;h2 id="confooca"&gt;ConFoo.CA&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://confoo.ca"&gt;ConFoo&lt;/a&gt; 是加拿大蒙特婁每年冬天的大型研討會之一，慣例辦在希爾頓酒店，主題以 Web 技術為主，前身是 PHP 研討會，這幾年才轉為綜合的研討會，這也是為何筆者有機會赴加拿大講 Ruby。&lt;/p&gt;

&lt;p&gt;此外門票約 3 萬台幣左右，3 天 9 軌，141 場講題，88 位講者，且每晚有免費的派對。即便門票如此，還是有接近千位聽眾報名，且無論從講題安排、派對活動、場地、飲食都是個品質很高的研討會。&lt;/p&gt;

&lt;p&gt;建議有興趣的人可以明年投稿看看，大會主辦這幾年開始想將研討會轉型為國際研討會，很歡迎外國人，例如今年除了筆者為台灣代表之外，也有來自沙烏地阿拉伯的講者。至於聽眾除了北美，也有南美與歐洲各國的人來參與，你可以很容易的與世界各地的工程師們交流、分享彼此的知識。且大多人都相當友善又樂於交友，氣氛很融洽。&lt;/p&gt;

&lt;h2 id="section"&gt;跟台灣的研討會比較&lt;/h2&gt;

&lt;p&gt;比較筆者過去在台灣參與的研討會，ConFoo 的設計有些很有趣的巧思，例如在名牌上加上 QR code，如果會眾沒有攜帶名片，可以讓別人的手機掃條碼，而條碼內容就是當初會眾報名研討會時所輸入的社交網址。即便筆者沒有智慧型手機，這個功能還是很吸引人。&lt;/p&gt;

&lt;p&gt;此外除了 9 個講聽以外，有一間最大的會場是預留給社交之用，內有很多桌椅，而每張桌子上面會標有某種特別的技術或領域的牌子，例如 PHP、Ruby、Maching Learning、AWS 等，會眾可以透過入座該位子，輕易找到與自己有相同興趣的人交流。&lt;/p&gt;

&lt;h2 id="section-1"&gt;會後小心得&lt;/h2&gt;

&lt;p&gt;筆者這次的主題是 Ruby 上的 C 擴展以及去年在 Ruby Kaigi 講的 Sony Remote Camera API，但可能是個 Web 技術研討會，來聽我的講題的人沒有很多。整個研討會中，光是 PHP 與 Java 的網站應用主題就超過了 7 成，而 C 的主題看過去也只有一場（就是我的），所以看來 ConFoo 要真正從 PHP 研討會歷史中脫出，還需要幾年的時間。&lt;/p&gt;

&lt;p&gt;此外不免小感嘆一下，在台灣不知道除了 godfat 以外，是否有寫 Ruby 的人是拿來做 Rails 以外的應用的，很想認識與交流一下。這年頭就連 PTT 上的 Ruby 版也淪為了 Rails 版，Ruby 論壇成了 Rails 論壇，有些小可惜呢。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2014 回顧</title>
    <link rel="alternate" href="http://tonytonyjan.net/2015/01/03/2014-review/"/>
    <id>http://tonytonyjan.net/2015/01/03/2014-review/</id>
    <published>2015-01-03T21:28:00+08:00</published>
    <updated>2015-02-23T02:43:03+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;&lt;img alt="" src="/images/2015-firework.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;好漂亮的雞毛撢子&lt;/del&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;工作&lt;/th&gt;
      &lt;th&gt;成就&lt;/th&gt;
      &lt;th&gt;日常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;四月&lt;/td&gt;
      &lt;td&gt;成立&lt;a href="/2014/05/30/5xruby-start/"&gt;五倍紅寶石股份有限公司&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubyconf.tw/2014/#speaker-tonytony"&gt;RubyConf Taiwan&lt;/a&gt; 講者、與 Matz 合影&lt;/td&gt;
      &lt;td&gt;&lt;a href="/2014/03/30/house-moving/"&gt;住的地方從 8 坪進化到 30 坪&lt;/a&gt;、&lt;a href="https://www.facebook.com/photo.php?fbid=10152088697477620"&gt;第一次組衣櫃&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;五月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;六月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;買了這輩子看過最大的電視（55 吋）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;七月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;花蓮五日遊，實驗白天旅行，晚上工作的可行性&lt;/td&gt;
      &lt;td&gt;世足通宵派對&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;八月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;九月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubykaigi.org/2014/presentation/S-JianWeihang"&gt;Ruby Kaigi&lt;/a&gt; 講者、第一次搭飛機、第一次去日本&lt;/td&gt;
      &lt;td&gt;烤肉團&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十一月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;25 歲慶生會、開始留鬍子&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十二月&lt;/td&gt;
      &lt;td&gt;與五倍紅寶石拆夥&lt;/td&gt;
      &lt;td&gt;TJDict 上了 &lt;a href="http://free.com.tw/tjdict/"&gt;freeGROUP&lt;/a&gt;，使用人數衝破 17k&lt;/td&gt;
      &lt;td&gt;湯圓大會、聖誕晚會、跨年派對、PS4 派對&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;感覺今年沒什麼在工作，只有在玩樂啊XD&lt;/p&gt;

&lt;p&gt;不過確實自從有客廳和客房之後，家裡三不五時會有聚會。雖然遠了點，至少有一個同樂地方可以吵再晚都沒有人管，且從家徒四壁到現在有電視機、遊戲機、桌遊 6 款、烤箱、沙發床等，明明只有一個人住，室內拖鞋也莫名其妙增加到 4 雙，平時沒去注意，但突然想起來真的覺得頗誇張的XD&lt;/p&gt;

</summary>
    <content type="html">&lt;p&gt;&lt;img alt="" src="/images/2015-firework.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;好漂亮的雞毛撢子&lt;/del&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;時間&lt;/th&gt;
      &lt;th&gt;工作&lt;/th&gt;
      &lt;th&gt;成就&lt;/th&gt;
      &lt;th&gt;日常&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;四月&lt;/td&gt;
      &lt;td&gt;成立&lt;a href="/2014/05/30/5xruby-start/"&gt;五倍紅寶石股份有限公司&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubyconf.tw/2014/#speaker-tonytony"&gt;RubyConf Taiwan&lt;/a&gt; 講者、與 Matz 合影&lt;/td&gt;
      &lt;td&gt;&lt;a href="/2014/03/30/house-moving/"&gt;住的地方從 8 坪進化到 30 坪&lt;/a&gt;、&lt;a href="https://www.facebook.com/photo.php?fbid=10152088697477620"&gt;第一次組衣櫃&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;五月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;六月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;買了這輩子看過最大的電視（55 吋）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;七月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;花蓮五日遊，實驗白天旅行，晚上工作的可行性&lt;/td&gt;
      &lt;td&gt;世足通宵派對&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;八月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;九月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;擔任 &lt;a href="http://rubykaigi.org/2014/presentation/S-JianWeihang"&gt;Ruby Kaigi&lt;/a&gt; 講者、第一次搭飛機、第一次去日本&lt;/td&gt;
      &lt;td&gt;烤肉團&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十一月&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;25 歲慶生會、開始留鬍子&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;十二月&lt;/td&gt;
      &lt;td&gt;與五倍紅寶石拆夥&lt;/td&gt;
      &lt;td&gt;TJDict 上了 &lt;a href="http://free.com.tw/tjdict/"&gt;freeGROUP&lt;/a&gt;，使用人數衝破 17k&lt;/td&gt;
      &lt;td&gt;湯圓大會、聖誕晚會、跨年派對、PS4 派對&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;感覺今年沒什麼在工作，只有在玩樂啊XD&lt;/p&gt;

&lt;p&gt;不過確實自從有客廳和客房之後，家裡三不五時會有聚會。雖然遠了點，至少有一個同樂地方可以吵再晚都沒有人管，且從家徒四壁到現在有電視機、遊戲機、桌遊 6 款、烤箱、沙發床等，明明只有一個人住，室內拖鞋也莫名其妙增加到 4 雙，平時沒去注意，但突然想起來真的覺得頗誇張的XD&lt;/p&gt;



&lt;p&gt;來看一下去年的 &lt;a href="/2014/01/01/2013-hui-gu/"&gt;2013 回顧&lt;/a&gt;的沒有完成的目標：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;帶全家出國玩&lt;/li&gt;
  &lt;li&gt;寫書&lt;/li&gt;
  &lt;li&gt;投稿，並且錄用至少一個研討會&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沒有錢和時間帶全家出國去玩，但有投稿了 RubyConf Taiwan 與 Ruby Kaigi，並且幸運的錄取了，且 2015 的加拿大 ConFoo 也錄取了筆者兩篇講題，雖然今年業績只有一半，但投稿的目標比預期多出了數倍的績效。&lt;/p&gt;

&lt;p&gt;寫書方面還是沒有完成，不過筆者在 2014 最後一天交出了兩百頁的內容到出版社，以為可以告一段落，想不到還有很多需要修改。但運氣好的話，應該 2015 可以出版吧？&lt;/p&gt;

&lt;p&gt;最近因為與五倍紅寶石拆夥，又回到找外包的生活。目前規劃今年把兵役搞定，然後 2016 可以準備出國工作，至於順利與否，且看老天爺XD&lt;/p&gt;

&lt;p&gt;2015 我來了 :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Rails 4.2 重點介紹</title>
    <link rel="alternate" href="http://tonytonyjan.net/2014/12/20/intorduction-to-rails-4-dot-2/"/>
    <id>http://tonytonyjan.net/2014/12/20/intorduction-to-rails-4-dot-2/</id>
    <published>2014-12-20T09:46:11+08:00</published>
    <updated>2014-12-25T20:45:11+08:00</updated>
    <author>
      <name>大兜</name>
    </author>
    <summary type="html">&lt;p&gt;Rails 團隊終於要在&lt;a href="http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final"&gt;聖誕節&lt;/a&gt;的同時釋出 Rails 4.2 版了，這次更新的重點有以下項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Active Job&lt;/li&gt;
  &lt;li&gt;Asynchronous mails&lt;/li&gt;
  &lt;li&gt;Adequate Record&lt;/li&gt;
  &lt;li&gt;Web Console&lt;/li&gt;
  &lt;li&gt;Foreign key support&lt;/li&gt;
&lt;/ul&gt;

</summary>
    <content type="html">&lt;p&gt;Rails 團隊終於要在&lt;a href="http://weblog.rubyonrails.org/2014/12/19/Rails-4-2-final"&gt;聖誕節&lt;/a&gt;的同時釋出 Rails 4.2 版了，這次更新的重點有以下項目：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Active Job&lt;/li&gt;
  &lt;li&gt;Asynchronous mails&lt;/li&gt;
  &lt;li&gt;Adequate Record&lt;/li&gt;
  &lt;li&gt;Web Console&lt;/li&gt;
  &lt;li&gt;Foreign key support&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 id="active-job"&gt;Active Job&lt;/h2&gt;

&lt;p&gt;一個網站常有些較繁重的工作，並不希望在使用者提出請求時立即執行，以寄出一萬封信為例，這也許需要幾分鐘的時間，當使用者點下寄信按鈕時如果還需要等個幾分鐘才可以看到回傳頁面，這將造成糟糕的使用者體驗。&lt;/p&gt;

&lt;p&gt;正規的作法是將這類需要長時間的工作丟到工作佇列去排程，並在背景中執行多個 worker 程序，每個 worker 都會不斷重複從佇列中取得新的工作去執行。&lt;/p&gt;

&lt;p&gt;Rails 已經有許多 gem 可以解決這個問題，著名項目包括 &lt;a href="https://github.com/resque/resque"&gt;Resque&lt;/a&gt;、&lt;a href="http://sidekiq.org/"&gt;Sidekiq&lt;/a&gt; 與 &lt;a href="https://github.com/collectiveidea/delayed_job"&gt;DelayedJob&lt;/a&gt;，其中 Resque 與 Sidekiq 使用 Redis 存放工作住列，DelayedJob 則用關聯式資料庫。&lt;/p&gt;

&lt;p&gt;Active Job 並不是提出了一個新的實作，換句話說，使用 Rails 4.2 並不代表未來就不用安裝 Resque 之類的 gem。&lt;/p&gt;

&lt;p&gt;它的真正意義在於統一使用介面，讓開發者在不同的 gem 之間切換時，可以不用受到 gem 的不同 API 而影響，因而降低重新改寫的成本。&lt;/p&gt;

&lt;p&gt;看到這裡是否覺得這種作法很熟悉？它其實就是適配器模式（Adapter pattern），早在 Active Record 誕生的時候就已經使用相同的技巧，Rails 之所以能以相同的 API 介面在不同的資料庫之間遊走也是拜此所賜。&lt;/p&gt;

&lt;p&gt;目前支援的 gem 有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -1 activejob/lib/active_job/queue_adapters
backburner_adapter.rb
delayed_job_adapter.rb
inline_adapter.rb
qu_adapter.rb
que_adapter.rb
queue_classic_adapter.rb
resque_adapter.rb
sidekiq_adapter.rb
sneakers_adapter.rb
sucker_punch_adapter.rb
test_adapter.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了 &lt;code&gt;test_adapter.rb&lt;/code&gt; 僅用於測試，以及 &lt;code&gt;inline_adapter.rb&lt;/code&gt; 為預設（立即執行，不會丟入背景），以外都有相對的 gem 需要安裝。&lt;/p&gt;

&lt;h3 id="section"&gt;使用方式&lt;/h3&gt;

&lt;p&gt;工作的內容必須定義在 &lt;code&gt;app/jobs/&lt;/code&gt; 下，並繼承自 &lt;code&gt;ActiveJob::Base&lt;/code&gt;，不過 Rails 4.2 提供了產生器，並不一定要手動新增：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g job execute_simulate
      invoke  test_unit
      create    test/jobs/execute_simulate_job_test.rb
      create  app/jobs/execute_simulate_job.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# app/jobs/execute_simulate_job.rb
class ExecuteSimulateJob &amp;lt; ActiveJob::Base
  queue_as :default

  def perform(*args)
    # Do something later
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;queue_as&lt;/code&gt; 可以設定將此工作排進特定的佇列，預設是 &lt;code&gt;default&lt;/code&gt;，可以透過 &lt;code&gt;--queue&lt;/code&gt;&lt;br /&gt;
參數修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g job execute_simulate --queue urgent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用起來像是這樣：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# 將工作丟進佇列
ExecuteSimulateJob.perform_later record

# 排程明天中午再執行
ExecuteSimulateJob.set(wait_until: Date.tomorrow.noon).perform_later(record)

# 排程一週後執行
ExecuteSimulateJob.set(wait: 1.week).perform_later(record)

# 指定特定的佇列
ExecuteSimulateJob.set(queue: :important).perform_later(record)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定要使用的 gem：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# config/application.rb
module YourApp
  class Application &amp;lt; Rails::Application
    # 請確保 Gemfile 已經有安裝所要使用的 gem
    config.active_job.queue_adapter = :resque
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="callback"&gt;回呼（Callback）&lt;/h3&gt;

&lt;p&gt;共有以下 6 個註冊點：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;before_enqueue&lt;/li&gt;
  &lt;li&gt;around_enqueue&lt;/li&gt;
  &lt;li&gt;after_enqueue&lt;/li&gt;
  &lt;li&gt;before_perform&lt;/li&gt;
  &lt;li&gt;around_perform&lt;/li&gt;
  &lt;li&gt;after_perform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用方式與 controller、model 中的回呼寫法是一樣的：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;class ExecuteSimulateJob &amp;lt; ActiveJob::Base
  queue_as :default
 
  before_enqueue do |job|
    # 在佇列前執行
  end
 
  around_perform do |job, block|
    # 在工作開始前執行
    block.call
    # 在工作完成後執行
  end
 
  def perform
    # Do something later
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="asynchronous-mails"&gt;Asynchronous Mails&lt;/h2&gt;

&lt;p&gt;如果寄信工作也要丟到工作佇列，先別急著寫工作檔，Rails 4.2 的 Action Mailer 內建了 &lt;code&gt;DeliveryJob&lt;/code&gt; 類別，並提供 &lt;code&gt;deliver_later&lt;/code&gt; 方法將寄信工作推進佇列。&lt;/p&gt;

&lt;p&gt;你可以像這樣使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# 使用 #deliver_later 透過 DeliveryJob 來寄信
MyMailer.welcome(@user).deliver_later

# 若不想丟到工作住列，也有 #deliver_now 可以使用
MyMailer.welcome(@user).deliver_now
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="adequate-record"&gt;Adequate Record&lt;/h2&gt;

&lt;p&gt;由 Aaron Patterson 所作，用於提高 &lt;code&gt;#find&lt;/code&gt;、&lt;code&gt;#find_by&lt;/code&gt; 等一些常用查詢指令的速度，可以提升 Active Record 約莫兩倍的效能。&lt;/p&gt;

&lt;p&gt;主要是因為 Active Record 在產生 SQL 過程有很多重複的片段不斷被重新製造，這其實可利用快取將重複的片段保存起來。細節請參考 &lt;a href="http://tenderlovemaking.com/2014/02/19/adequaterecord-pro-like-activerecord.html"&gt;Aaron Patterson 的網誌&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id="web-console"&gt;Web Console&lt;/h2&gt;

&lt;p&gt;如果你有用過 &lt;code&gt;better_errors&lt;/code&gt; gem，那麼這就是類似的東西了。Rails 4.2 在開發環境下的錯誤頁面會多出一個 rails console 命令窗可以使用，除了一般 irb 的功能以外，也可以存取到該次請求中定義的實體與區域變數。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Rails 4.2 Web Console" src="/images/web-console.png" /&gt;&lt;/p&gt;

&lt;p&gt;但不只有錯誤頁面才有命令窗可以使用，也可以在任何 view 的檔案中的任何位置加入 &lt;code&gt;&amp;lt;%= console %&amp;gt;&lt;/code&gt;，只要渲染到該檔案，就有命令窗可以使用。&lt;/p&gt;

&lt;h2 id="foreign-keys"&gt;外鍵（Foreign Keys）&lt;/h2&gt;

&lt;p&gt;Rails 4.2 遷移指令支援了 SQL 的外鍵定義功能，目前只有 mysql、mysql2 與 postgresql 可用。&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;# 將 `articles.author_id` 定義為參考 `authors.id` 的外鍵
add_foreign_key :articles, :authors

# 若命名沒有按照慣例，也可以透過設定達到
# 例如將 `articles.author_id` 定義為參考 `users.lng_id` 的外鍵
add_foreign_key :articles, :users, column: :author_id, primary_key: "lng_id"

# 刪除 `accounts.branch_id` 外鍵
remove_foreign_key :accounts, :branches
 
# 刪除 `accounts.owner_id` 外鍵
remove_foreign_key :accounts, column: :owner_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這個功能在 migration 與 model 等會產生遷移檔的產生器，當使用到 &lt;code&gt;references&lt;/code&gt; 型別時也會自動的被使用，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rails g migration add_user_to_posts user:references
      invoke  active_record
      create    db/migrate/20141222180048_add_user_to_posts.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;class AddUserToPosts &amp;lt; ActiveRecord::Migration
  def change
    add_reference :posts, :user, index: true
    add_foreign_key :posts, :users # Rails 4.2 功能
  end
end
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
